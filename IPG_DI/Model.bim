{
  "name": "SemanticModel",
  "compatibilityLevel": 1400,
  "model": {
    "culture": "en-US",
    "dataSources": [
      {
        "name": "IBI",
        "connectionString": "Provider=MSDASQL;Persist Security Info=False;DSN=iBI DaaS",
        "impersonationMode": "impersonateServiceAccount",
        "annotations": [
          {
            "name": "ConnectionEditUISource",
            "value": "Others"
          }
        ]
      },
      {
        "name": "actis_db",
        "connectionString": "Provider=MSDASQL;DSN=PostgreSQL_actis",
        "impersonationMode": "impersonateServiceAccount",
        "annotations": [
          {
            "name": "ConnectionEditUISource",
            "value": "Others"
          }
        ]
      },
      {
        "type": "structured",
        "name": "AnalysisServices/sdlintegrated_hs intel com;SDLIntegrated",
        "connectionDetails": {
          "protocol": "analysis-services",
          "address": {
            "server": "sdlintegrated_hs.intel.com",
            "database": "SDLIntegrated"
          },
          "authentication": null,
          "query": null
        },
        "options": {
          "typedMeasureColumns": true,
          "implementation": "2.0"
        },
        "credential": {
          "AuthenticationKind": "ServiceAccount"
        }
      }
    ],
    "tables": [
      {
        "name": "Main",
        "columns": [
          {
            "name": "Org",
            "dataType": "string",
            "sourceColumn": "Org",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Supplier",
            "dataType": "string",
            "sourceColumn": "Supplier",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SupplierId",
            "dataType": "int64",
            "sourceColumn": "SupplierId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "IpGenerationId",
            "dataType": "int64",
            "sourceColumn": "IpGenerationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Generation",
            "dataType": "string",
            "sourceColumn": "Generation",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IpFamilyId",
            "dataType": "int64",
            "sourceColumn": "IpFamilyId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "LeadProductId",
            "dataType": "int64",
            "sourceColumn": "LeadProductId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "LeadProduct",
            "dataType": "string",
            "sourceColumn": "LeadProduct",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Domain",
            "dataType": "string",
            "sourceColumn": "Domain",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Subdomain",
            "dataType": "string",
            "sourceColumn": "Subdomain",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Drop",
            "dataType": "string",
            "sourceColumn": "Drop",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DropType",
            "dataType": "string",
            "sourceColumn": "DropType",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "MilestoneId",
            "dataType": "int64",
            "sourceColumn": "MilestoneId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "TrendYYYYWW",
            "dataType": "int64",
            "sourceColumn": "TrendYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "TrendExactDate",
            "dataType": "dateTime",
            "sourceColumn": "TrendExactDate",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "PorYYYYWW",
            "dataType": "int64",
            "sourceColumn": "PorYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "PorExactDate",
            "dataType": "dateTime",
            "sourceColumn": "PorExactDate",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "Complete",
            "dataType": "string",
            "sourceColumn": "Complete",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "UsingProductsSummary",
            "dataType": "string",
            "sourceColumn": "UsingProductsSummary",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "UsingProducts",
            "dataType": "string",
            "sourceColumn": "UsingProducts",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "AffectedProducts",
            "dataType": "string",
            "sourceColumn": "AffectedProducts",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Visible",
            "dataType": "string",
            "sourceColumn": "Visible",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Revision",
            "dataType": "string",
            "sourceColumn": "Revision",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "PlanningStatus",
            "dataType": "string",
            "sourceColumn": "PlanningStatus",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Reuse",
            "dataType": "string",
            "sourceColumn": "Reuse",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TrendChangeReason",
            "dataType": "string",
            "sourceColumn": "TrendChangeReason",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TrendOffSet",
            "dataType": "int64",
            "sourceColumn": "TrendOffSet"
          },
          {
            "name": "TrendChangeDate",
            "dataType": "dateTime",
            "sourceColumn": "TrendChangeDate"
          },
          {
            "name": "is execution drop",
            "dataType": "int64",
            "sourceColumn": "is execution drop"
          },
          {
            "name": "is ip3",
            "dataType": "int64",
            "sourceColumn": "is ip3"
          },
          {
            "name": "IP3 Complete",
            "dataType": "string",
            "sourceColumn": "IP3 Complete"
          },
          {
            "name": "IP3 Trend",
            "dataType": "int64",
            "sourceColumn": "IP3 Trend"
          },
          {
            "name": "IP3 POR",
            "dataType": "int64",
            "sourceColumn": "IP3 POR"
          },
          {
            "name": "is delivered",
            "dataType": "int64",
            "sourceColumn": "is delivered"
          },
          {
            "name": "Indicator",
            "dataType": "string",
            "sourceColumn": "Indicator",
            "sortByColumn": "Indicator order"
          },
          {
            "name": "IndicatorId",
            "dataType": "string",
            "sourceColumn": "IndicatorId"
          },
          {
            "name": "Team",
            "dataType": "string",
            "sourceColumn": "Team",
            "sortByColumn": "Team order"
          },
          {
            "name": "Count of",
            "dataType": "string",
            "sourceColumn": "Count of"
          },
          {
            "name": "Late Reason",
            "dataType": "string",
            "sourceColumn": "Late Reason"
          },
          {
            "name": "Redrop Reason",
            "dataType": "string",
            "sourceColumn": "Redrop Reason"
          },
          {
            "name": "Mitigation",
            "dataType": "string",
            "sourceColumn": "Mitigation"
          },
          {
            "name": "Future Prevention",
            "dataType": "string",
            "sourceColumn": "Future Prevention"
          },
          {
            "name": "Impact",
            "dataType": "string",
            "sourceColumn": "Impact"
          },
          {
            "name": "missing trend filter",
            "dataType": "int64",
            "sourceColumn": "missing trend filter"
          },
          {
            "name": "is missing trend",
            "dataType": "int64",
            "sourceColumn": "is missing trend"
          },
          {
            "name": "stale drop filter",
            "dataType": "int64",
            "sourceColumn": "stale drop filter"
          },
          {
            "name": "is stale drop",
            "dataType": "int64",
            "sourceColumn": "is stale drop"
          },
          {
            "name": "Team order",
            "dataType": "string",
            "sourceColumn": "Team order"
          },
          {
            "name": "Indicator Domain",
            "dataType": "string",
            "sourceColumn": "Indicator Domain"
          },
          {
            "name": "late retrospective filter",
            "dataType": "int64",
            "sourceColumn": "late retrospective filter"
          },
          {
            "name": "is missing late retrospective",
            "dataType": "int64",
            "sourceColumn": "is missing late retrospective"
          },
          {
            "name": "redrop retrospective filter",
            "dataType": "int64",
            "sourceColumn": "redrop retrospective filter"
          },
          {
            "name": "is missing redrop retrospective",
            "dataType": "int64",
            "sourceColumn": "is missing redrop retrospective"
          },
          {
            "name": "impact retrospective filter",
            "dataType": "int64",
            "sourceColumn": "impact retrospective filter"
          },
          {
            "name": "impact case",
            "dataType": "string",
            "sourceColumn": "impact case"
          },
          {
            "name": "is missing impact retrospective",
            "dataType": "int64",
            "sourceColumn": "is missing impact retrospective"
          },
          {
            "name": "ops contact filter",
            "dataType": "int64",
            "sourceColumn": "ops contact filter"
          },
          {
            "name": "is missing ops contact",
            "dataType": "int64",
            "sourceColumn": "is missing ops contact"
          },
          {
            "name": "mdg name filter",
            "dataType": "int64",
            "sourceColumn": "mdg name filter"
          },
          {
            "name": "is missing mdg name",
            "dataType": "int64",
            "sourceColumn": "is missing mdg name"
          },
          {
            "name": "ip contract milestone doc filter",
            "dataType": "int64",
            "sourceColumn": "ip contract milestone doc filter"
          },
          {
            "name": "is missing ip contract milestone doc",
            "dataType": "int64",
            "sourceColumn": "is missing ip contract milestone doc"
          },
          {
            "name": "missing parent filter",
            "dataType": "int64",
            "sourceColumn": "missing parent filter"
          },
          {
            "name": "is missing parent",
            "dataType": "int64",
            "sourceColumn": "is missing parent"
          },
          {
            "type": "calculated",
            "name": "Compliance Label",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"Compliance\""
          },
          {
            "name": "missing por filter",
            "dataType": "int64",
            "sourceColumn": "missing por filter"
          },
          {
            "name": "is missing por",
            "dataType": "int64",
            "sourceColumn": "is missing por"
          },
          {
            "type": "calculated",
            "name": "Carbon Milestone Link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/carbon/planning/milestone-plan/\"&[IpConfigurationId]",
            "dataCategory": "WebUrl"
          },
          {
            "name": "HsdEsId",
            "dataType": "int64",
            "sourceColumn": "HsdEsId"
          },
          {
            "name": "Trigger",
            "dataType": "string",
            "sourceColumn": "Trigger"
          },
          {
            "type": "calculated",
            "name": "Indicator filter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH([IndicatorId_int],",
              "8,[missing trend filter],",
              "13,[stale drop filter],",
              "11,[late retrospective filter],",
              "12,[redrop retrospective filter],",
              "7,[impact retrospective filter],",
              "22,[ops contact filter],",
              "20,[missing por filter],",
              "4,[ip contract milestone doc filter],",
              "3,[missing parent filter],",
              "21,[mdg name filter],",
              "9,[missing ip contacts filter],",
              "26,[ipfamily cleanup filter],",
              "27,[supplier cleanup filter],",
              "28,[gladius filter],",
              "6,RELATED(soc_customers_anchor[missing cm filter]),",
              "14,[ie drop filter],",
              "29,[icr drop filter],",
              "30,[trm filter],",
              "15,Main[datasheet filter],",
              "32,Main[gladius drops filter],",
              "33,Main[has filter],",
              "34,Main[osxml filter],",
              "35,Main[s1 filter],",
              "36,Main[fas filter],",
              "37,Main[swas filter],",
              "40,Main[ie complete filter],",
              "41,Main[ipec doc filter],",
              "43,Main[iac drop filter],",
              "44,Main[iac complete filter],",
              "45,[iac trend filter],",
              "46,[icr doc filter],",
              "52,[fv drop filter]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Indicator is missing",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH([IndicatorId_int],",
              "8,[is missing trend],",
              "13,[is stale drop],",
              "11,[is missing late retrospective],",
              "12,[is missing redrop retrospective],",
              "7,[is missing impact retrospective],",
              "22,[is missing ops contact],",
              "20,[is missing por],",
              "4,[is missing ip contract milestone doc],",
              "3,[is missing parent],",
              "21,[is missing mdg name],",
              "9,RELATED(release_central_family[is missing ip contacts]),",
              "26,RELATED(release_central_family[is missing ipfamily cleanup]),",
              "27,RELATED(release_central_family[is missing supplier cleanup]),",
              "28,RELATED(release_central_family[is missing gladius]),",
              "6,RELATED(soc_customers_anchor[is missing cm]),",
              "14,[is missing ie drop],",
              "29,[is missing icr drop],",
              "30,[is missing trm],",
              "15,Main[is missing datasheet],",
              "32,Main[is missing gladius drops],",
              "40,Main[is ie complete],",
              "41,Main[is missing ipec doc],",
              "43,Main[is missing iac drop],",
              "44,Main[is iac complete],",
              "45,[is iac trend],",
              "46,[is missing icr doc],",
              "52,[is missing fv drop]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "DI Details: Indicator",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"DI Details: \" &[Indicator] &UNICHAR(10) & [Description]"
          },
          {
            "type": "calculated",
            "name": "Description",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH([IndicatorId_int],",
              "8,\"Trend date is missing in Carbon\",",
              "13,\"Trend date is in the past and the milestone marked as incomplete\",",
              "11,\"Late reason is triggered once trend is assigned in Carbon, mitigation and future prevention are triggered when drop marked as completed\",",
              "12,\"Redrop reason is triggered once trend is assigned in Carbon, mitigation and future prevention are triggered when drop marked as completed\",",
              "7,\"The following drops are missing late drop/hotfix impact evaluation, please enter in Carbon if there was an impact to the costumer\",",
              "22,\"Ops Contact is missing in the supplier level in Carbon\",",
              "20,\"All IPs post IP3 should have PORs in place in Carbon\",",
              "4,\"The following IPs are marked as “IP3 completed” but missing SOC/IP documentation\",",
              "3,\"The following IPs are missing parent in the BOM (SOC/Subsystem/TC/hip parent)\",",
              "21,\"All IPs post IP2 (including test chips) should have MDG project name (finance_project) assigned in Carbon\",",
              "9,\"All IP families should have IP point of contacts assigned in Carbon\",",
              "26,\"The following IP families have old IP familiy value in Carbon\",",
              "27,\"The following suppliers have old supplier value in Carbon\",",
              "28,\"All IP families should have gladius value in Carbon\",",
              "6,\"Customer manager is missing for the following products\",",
              "14,\"Need to add IE (IP Execution commit) milestone + Trend date in Carbon\",",
              "29,\"Need to add IC/ICR (IP Concept Refresh) milestone + Trend date in Carbon\",",
              "30,\"The following IPs are marked as “IE Milestone completed” but are missing the TRM documentation\",",
              "15,\"The following IPs are marked as “IE Milestone completed” but are missing the Datasheet documentation\",",
              "31,\"The following features are required to be moved from “open” or “strawman” status to POR/Complete/Reject/Future status or missing alpha/ beta/ prod\",",
              "32,\"Need to add the following IP gladius drops: UV2/ eFV/ FV in Carbon\",",
              "41,\"The following IPs have “IE Milestone” in Carbon but are missing the IPEC documentation\",",
              "43,\"Need to add IAC (IP Architecture Complete) milestone + Trend date in Carbon\",",
              "45,\"IAC Trend date need to be up to six week after the IE trend date, please change the trend dates accordingly\",",
              "46,\"Need to add the IC/ICR (IP Concept Refresh) documentation\",",
              "52,\"Need to add the following IP gladius drops: eFV/ FV in Carbon\"",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Action required",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF([Indicator is missing] =3 , \"3. Not triggered\",",
              "IF( ISBLANK([Indicator is missing]), blank(),",
              "IF([Indicator is missing] =2, \"2. OK\", \"1. \" &",
              "IF([IndicatorId_int]=8,\"Please provide trend date in Carbon\",",
              "IF([IndicatorId_int]=13,\"Please change the trend date to the future or mark the milestone as complete\",",
              "IF([IndicatorId_int]=10,\"Please review and decide if the drop can be obsoleted/updated or update the trend reason change\",",
              "IF([IndicatorId_int]=11,\"Please fill out the missing retrospective fields in Carbon\",",
              "IF([IndicatorId_int]=12,\"Please fill out the missing retrospective fields in Carbon\",",
              "IF([IndicatorId_int]=7,\"Please provide impact for \"&[impact case],",
              "IF([IndicatorId_int]=22,\" please add the ops contact in the supplier level in Carbon\",",
              "IF([IndicatorId_int]=20,\"Please provide POR date in Carbon\",",
              "IF([IndicatorId_int]=4,\"Please add SOC/IP documentation\",",
              "IF([IndicatorId_int]=3,\"Please connect the IP to the right parent in the BOM (SOC/Subsystem/TC/hip parent)\",",
              "IF([IndicatorId_int]=21,\"Please add MDG project name (finance_project) in Carbon\",",
              "IF([IndicatorId_int]=9,\"Please add the missing point of contacts in Carbon\",",
              "IF([IndicatorId_int]=26,\"Mismatch\",",
              "IF([IndicatorId_int]=27,\"Mismatch\",",
              "IF([IndicatorId_int]=28,\"Please add the gladius value in Carbon\",",
              "IF([IndicatorId_int]=6,\"Please add customer manager contact\",",
              "IF([IndicatorId_int]=14,\"Please add the missing IE (IP Execution) items\",",
              "IF([IndicatorId_int]=29,\"Please add the missing IC/ICR (IP Concept Refresh) items\",",
              "IF([IndicatorId_int]=30,\"Please add TRM documentation in Carbon\",",
              "IF([IndicatorId_int]=15,\"Please add Datasheet documentation in Carbon\",",
              "IF([IndicatorId_int]=31,\"Please fix the required fields\",",
              "IF([IndicatorId_int]=32,\"Please add the missing IP gladius drops in Carbon\",",
              "IF([IndicatorId_int]=41,\"Please add IPEC documentation in Carbon\",",
              "IF([IndicatorId_int]=43,\"Please add the missing IAC (IP Architecture) items\",",
              "IF([IndicatorId_int]=45,\"Please add/change the IAC trend date accordingly\",",
              "IF([IndicatorId_int]=46,\"Please add IC/ICR (IP Concept Refresh) documentation in Carbon\",",
              "IF([IndicatorId_int]=52,\"Please add the missing IP gladius drops in Carbon\"",
              "",
              "    )))))))))))))))))))))))))))",
              ")))"
            ]
          },
          {
            "type": "calculated",
            "name": "Link step1",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF([IndicatorId_int]=8,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectioneb483c3513c595208a3c?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=13,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection07cc5dd012db564cad01?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=11,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectiona0e6d3719bbc5d705dd7?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=12,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection18dc3929de67e478cb67?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=7,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection71327abac874352ac08a?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=22,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection5ee8d6ac0d88436ba0d2?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=20,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectionc7bf50b8946b27b04ec9?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=4,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection78bebef03a1cb3a12461?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=3,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectionb01f98f575271203393e?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=9,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection24c4f792c358b827dd50?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=21,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectionf6ca70b90e49a8944020?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=26,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection31b3347e166f82858b6d?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=27,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection1863f7f0e70f24ca47de?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=6,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection553c41d0993e6825c04c?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=28,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectiondb7ba29556b21d75e09b?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=14,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectionf14a54f43d74711dcab7?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=29,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectionf3944a83461bfbfaba98?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=30,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectione86d8625371a506b41aa?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=15,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection44aaa0f1946470073422?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=31 && MAX(features[tenant]) =\"JIRA\",\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/87278665-68d6-4dc3-90e7-16a8e3f8cd22/ReportSection1f7ff89cc22c20007309?filter=QueryFeature/summary_team_filed eq 'Customer'\",",
              "IF([IndicatorId_int]=31,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection28cb46b93b0d09484297?filter=Main/dummy_filter eq 1 and features/summary_team_filed eq 'Customer'\",",
              "IF([IndicatorId_int]=42 && MAX(features[tenant]) =\"JIRA\",\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/87278665-68d6-4dc3-90e7-16a8e3f8cd22/ReportSection1f7ff89cc22c20007309?filter=QueryFeature/summary_team_filed ne 'Customer'\",",
              "IF([IndicatorId_int]=42,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection28cb46b93b0d09484297?filter=Main/dummy_filter eq 1 and features/summary_team_filed ne 'Customer'\",",
              "IF([IndicatorId_int]=38 && MAX(features[tenant]) =\"JIRA\",\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/87278665-68d6-4dc3-90e7-16a8e3f8cd22/ReportSection1f7ff89cc22c20007309?filter=QueryFeature/summary_team_filed eq 'Customer'\",",
              "IF([IndicatorId_int]=38,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection28cb46b93b0d09484297?filter=Main/dummy_filter eq 1 and features/is_global eq 1 and features/summary_team_filed eq 'Customer'\",",
              "IF([IndicatorId_int]=32,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectionaceb9b7dc474ae3865ae?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=41,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectionf91b641a84eba1f2651f?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=43,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectione41de6b81f7b895d2d40?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=45,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectiona9297797f0d93d3f578c?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=46,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectionfaacf7191dc72e2ad3ca?filter=Main/dummy_filter eq 1\",",
              "IF([IndicatorId_int]=52,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection7f5f541005093c27854c?filter=Main/dummy_filter eq 1\"",
              "",
              ")))))))))))))))))))))))))))))))",
              "",
              ""
            ],
            "dataCategory": "WebUrl"
          },
          {
            "name": "IpFamilyId, IndicatorId",
            "dataType": "string",
            "sourceColumn": "IpFamilyId, IndicatorId"
          },
          {
            "type": "calculated",
            "name": "available ip contacts",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "RELATED(release_central_family[available ip contacts])",
              "",
              ""
            ]
          },
          {
            "name": "OPS Contact",
            "dataType": "string",
            "sourceColumn": "OPS Contact"
          },
          {
            "type": "calculated",
            "name": "User",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF([Team order]=\"1\",RELATED(soc_customers_anchor[Customer_Manager]),",
              "IF([Team order]=\"2\",RELATED(release_central_family[Program_Manager]),",
              "IF([Team order]=\"3\",RELATED(release_central_family[Product_Owner]),",
              "IF([Team order]=\"4\",[OPS Contact],",
              "IF([Team order]=\"5\",\"\",",
              "IF([Team order]=\"6\",RELATED(release_central_family[Support_Lead]),",
              "IF([Team order]=\"7\",RELATED(release_central_family[Architecture_Lead]),",
              "IF([Team order]=\"8\",RELATED(release_central_family[Execution_Lead])",
              "))))))))",
              ""
            ]
          },
          {
            "name": "ip contract milestone document",
            "dataType": "string",
            "sourceColumn": "ip contract milestone document"
          },
          {
            "name": "MDG Project Name",
            "dataType": "string",
            "sourceColumn": "MDG Project Name"
          },
          {
            "type": "calculated",
            "name": "User_Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(worker_public[User_Name])"
          },
          {
            "type": "calculated",
            "name": "Supplier hsd link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/article/#/\" & RELATED(release_central_family[Supplier hsd id])",
            "dataCategory": "WebUrl"
          },
          {
            "type": "calculated",
            "name": "IPFamily hsd link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/article/#/\"& RELATED(release_central_family[id])",
            "dataCategory": "WebUrl"
          },
          {
            "name": "IpType",
            "dataType": "string",
            "sourceColumn": "IpType"
          },
          {
            "type": "calculated",
            "name": "Product hsd link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/article/#/\"& RELATED(soc_customers_anchor[Id])",
            "dataCategory": "WebUrl"
          },
          {
            "name": "IsUnrequestable",
            "dataType": "string",
            "sourceColumn": "IsUnrequestable"
          },
          {
            "name": "is ic",
            "dataType": "int64",
            "sourceColumn": "is ic"
          },
          {
            "name": "IC Complete",
            "dataType": "string",
            "sourceColumn": "IC Complete"
          },
          {
            "name": "IC Trend",
            "dataType": "int64",
            "sourceColumn": "IC Trend"
          },
          {
            "name": "IC POR",
            "dataType": "int64",
            "sourceColumn": "IC POR"
          },
          {
            "name": "IC UsingReleases",
            "dataType": "string",
            "sourceColumn": "IC UsingReleases"
          },
          {
            "name": "is missing ic por",
            "dataType": "int64",
            "sourceColumn": "is missing ic por"
          },
          {
            "name": "is ie",
            "dataType": "int64",
            "sourceColumn": "is ie"
          },
          {
            "name": "IE Complete",
            "dataType": "string",
            "sourceColumn": "IE Complete"
          },
          {
            "name": "IE Trend",
            "dataType": "int64",
            "sourceColumn": "IE Trend"
          },
          {
            "name": "IE POR",
            "dataType": "int64",
            "sourceColumn": "IE POR"
          },
          {
            "name": "IE UsingReleases",
            "dataType": "string",
            "sourceColumn": "IE UsingReleases"
          },
          {
            "name": "is missing ie por",
            "dataType": "int64",
            "sourceColumn": "is missing ie por"
          },
          {
            "name": "Datasheet document",
            "dataType": "string",
            "sourceColumn": "Datasheet document"
          },
          {
            "name": "datasheet filter",
            "dataType": "int64",
            "sourceColumn": "datasheet filter"
          },
          {
            "name": "is missing datasheet",
            "dataType": "int64",
            "sourceColumn": "is missing datasheet"
          },
          {
            "type": "calculated",
            "name": "Carbon Documents Link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/carbon/overview/documents/\"&[IpConfigurationId]",
            "dataCategory": "WebUrl"
          },
          {
            "type": "calculated",
            "name": "IC Drop",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([is ic]=1,\"Exist\",\"Missing\")"
          },
          {
            "type": "calculated",
            "name": "IE Drop",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([is ie]=1,\"Exist\",\"Missing\")"
          },
          {
            "name": "is missing ie usingreleases",
            "dataType": "int64",
            "sourceColumn": "is missing ie usingreleases"
          },
          {
            "name": "IpConfigurationId, MilestoneId",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId, MilestoneId"
          },
          {
            "name": "TRM document",
            "dataType": "string",
            "sourceColumn": "TRM document"
          },
          {
            "name": "IsRequestable",
            "dataType": "string",
            "sourceColumn": "IsRequestable"
          },
          {
            "name": "ie drop filter",
            "dataType": "int64",
            "sourceColumn": "ie drop filter"
          },
          {
            "name": "is missing ie drop",
            "dataType": "int64",
            "sourceColumn": "is missing ie drop"
          },
          {
            "name": "trm filter",
            "dataType": "int64",
            "sourceColumn": "trm filter"
          },
          {
            "name": "is missing trm",
            "dataType": "int64",
            "sourceColumn": "is missing trm"
          },
          {
            "type": "calculated",
            "name": "Carbon Generation Milestone Link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/carbon/planning/milestone-plan/\"&[IpGenerationId]",
            "dataCategory": "WebUrl"
          },
          {
            "name": "has_UV2",
            "dataType": "int64",
            "sourceColumn": "has_UV2"
          },
          {
            "name": "has_eFV",
            "dataType": "int64",
            "sourceColumn": "has_eFV"
          },
          {
            "name": "has_FV",
            "dataType": "int64",
            "sourceColumn": "has_FV"
          },
          {
            "name": "gladius drops filter",
            "dataType": "int64",
            "sourceColumn": "gladius drops filter"
          },
          {
            "name": "is missing gladius drops",
            "dataType": "int64",
            "sourceColumn": "is missing gladius drops"
          },
          {
            "name": "is mssisng FV",
            "dataType": "int64",
            "sourceColumn": "is mssisng FV"
          },
          {
            "name": "is mssisng eFV",
            "dataType": "int64",
            "sourceColumn": "is mssisng eFV"
          },
          {
            "name": "is mssisng UV2",
            "dataType": "int64",
            "sourceColumn": "is mssisng UV2"
          },
          {
            "type": "calculated",
            "name": "missing ip contacts filter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([IndicatorId]= \"9\",1,0)"
          },
          {
            "type": "calculated",
            "name": "ipfamily cleanup filter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([IndicatorId]= \"26\",1,0)"
          },
          {
            "type": "calculated",
            "name": "supplier cleanup filter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([IndicatorId]= \"27\",1,0)"
          },
          {
            "type": "calculated",
            "name": "gladius filter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([IndicatorId]= \"28\",1,0)"
          },
          {
            "name": "old SubOrg",
            "dataType": "string",
            "sourceColumn": "old SubOrg"
          },
          {
            "name": "old IpFamily",
            "dataType": "string",
            "sourceColumn": "old IpFamily"
          },
          {
            "type": "calculated",
            "name": "IPFamily",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(release_central_family[IPFamily])"
          },
          {
            "type": "calculated",
            "name": "SubOrg",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(release_central_family[SubOrg])"
          },
          {
            "name": "DI Filter",
            "dataType": "string",
            "sourceColumn": "DI Filter"
          },
          {
            "name": "IE Filter",
            "dataType": "string",
            "sourceColumn": "IE Filter"
          },
          {
            "type": "calculated",
            "name": ". Label",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\".\""
          },
          {
            "name": "Indicator order",
            "dataType": "int64",
            "sourceColumn": "Indicator order"
          },
          {
            "name": "waiver_ItemId",
            "dataType": "string",
            "sourceColumn": "waiver_ItemId"
          },
          {
            "name": "has filter",
            "dataType": "int64",
            "sourceColumn": "has filter"
          },
          {
            "name": "osxml filter",
            "dataType": "int64",
            "sourceColumn": "osxml filter"
          },
          {
            "name": "s1 filter",
            "dataType": "int64",
            "sourceColumn": "s1 filter"
          },
          {
            "name": "fas filter",
            "dataType": "int64",
            "sourceColumn": "fas filter"
          },
          {
            "name": "swas filter",
            "dataType": "int64",
            "sourceColumn": "swas filter"
          },
          {
            "type": "calculated",
            "name": "dummy_filter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "1"
          },
          {
            "name": "Carbon ProductName",
            "dataType": "string",
            "sourceColumn": "Carbon ProductName"
          },
          {
            "name": "DieID",
            "dataType": "int64",
            "sourceColumn": "DieID"
          },
          {
            "name": "DieName",
            "dataType": "string",
            "sourceColumn": "DieName"
          },
          {
            "name": "soc filter",
            "dataType": "int64",
            "sourceColumn": "soc filter"
          },
          {
            "name": "SoC",
            "dataType": "string",
            "sourceColumn": "SoC"
          },
          {
            "type": "calculated",
            "name": "IpConfigurationId, DieID",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[IpConfigurationId]&\", \"& [DieID]"
          },
          {
            "type": "calculated",
            "name": "IpConfigurationId, SoC",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[IpConfigurationId]&\", \"& [SoC]"
          },
          {
            "name": "cutoff filter",
            "dataType": "int64",
            "sourceColumn": "cutoff filter"
          },
          {
            "name": "ie complete filter",
            "dataType": "int64",
            "sourceColumn": "ie complete filter"
          },
          {
            "name": "is ie complete",
            "dataType": "int64",
            "sourceColumn": "is ie complete"
          },
          {
            "name": "IPEC_doc",
            "dataType": "string",
            "sourceColumn": "IPEC_doc"
          },
          {
            "name": "ipec doc filter",
            "dataType": "int64",
            "sourceColumn": "ipec doc filter"
          },
          {
            "name": "is missing ipec doc",
            "dataType": "int64",
            "sourceColumn": "is missing ipec doc"
          },
          {
            "name": "is iac",
            "dataType": "int64",
            "sourceColumn": "is iac"
          },
          {
            "name": "IAC Complete",
            "dataType": "string",
            "sourceColumn": "IAC Complete"
          },
          {
            "name": "IAC Trend",
            "dataType": "int64",
            "sourceColumn": "IAC Trend"
          },
          {
            "name": "IAC POR",
            "dataType": "int64",
            "sourceColumn": "IAC POR"
          },
          {
            "name": "IAC UsingReleases",
            "dataType": "string",
            "sourceColumn": "IAC UsingReleases"
          },
          {
            "name": "is missing iac por",
            "dataType": "int64",
            "sourceColumn": "is missing iac por"
          },
          {
            "name": "is missing iac usingreleases",
            "dataType": "int64",
            "sourceColumn": "is missing iac usingreleases"
          },
          {
            "name": "IAC Filter",
            "dataType": "string",
            "sourceColumn": "IAC Filter"
          },
          {
            "name": "iac drop filter",
            "dataType": "int64",
            "sourceColumn": "iac drop filter"
          },
          {
            "name": "is missing iac drop",
            "dataType": "int64",
            "sourceColumn": "is missing iac drop"
          },
          {
            "name": "iac complete filter",
            "dataType": "int64",
            "sourceColumn": "iac complete filter"
          },
          {
            "name": "is iac complete",
            "dataType": "int64",
            "sourceColumn": "is iac complete"
          },
          {
            "type": "calculated",
            "name": "IAC Drop",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([is iac]=1,\"Exist\",\"Missing\")"
          },
          {
            "type": "calculated",
            "name": "IndicatorId_int",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": "VALUE([IndicatorId])"
          },
          {
            "type": "calculated",
            "name": "Team Order int",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "VALUE([Team order])"
          },
          {
            "name": "IE and IAC diff",
            "dataType": "int64",
            "sourceColumn": "IE and IAC diff"
          },
          {
            "name": "iac trend filter",
            "dataType": "int64",
            "sourceColumn": "iac trend filter"
          },
          {
            "name": "is iac trend",
            "dataType": "int64",
            "sourceColumn": "is iac trend"
          },
          {
            "name": "sdle_s0 filter",
            "dataType": "int64",
            "sourceColumn": "sdle_s0 filter"
          },
          {
            "name": "sdle_s1 filter",
            "dataType": "int64",
            "sourceColumn": "sdle_s1 filter"
          },
          {
            "name": "IC Filter",
            "dataType": "string",
            "sourceColumn": "IC Filter"
          },
          {
            "name": "IC_doc",
            "dataType": "string",
            "sourceColumn": "IC_doc"
          },
          {
            "name": "is icr",
            "dataType": "int64",
            "sourceColumn": "is icr"
          },
          {
            "name": "ICR Complete",
            "dataType": "string",
            "sourceColumn": "ICR Complete"
          },
          {
            "name": "ICR Trend",
            "dataType": "int64",
            "sourceColumn": "ICR Trend"
          },
          {
            "name": "ICR POR",
            "dataType": "int64",
            "sourceColumn": "ICR POR"
          },
          {
            "name": "ICR UsingReleases",
            "dataType": "string",
            "sourceColumn": "ICR UsingReleases"
          },
          {
            "name": "ICR_doc",
            "dataType": "string",
            "sourceColumn": "ICR_doc",
            "dataCategory": "WebUrl"
          },
          {
            "name": "is sip",
            "dataType": "int64",
            "sourceColumn": "is sip"
          },
          {
            "name": "fv drop filter",
            "dataType": "int64",
            "sourceColumn": "fv drop filter"
          },
          {
            "name": "is missing fv drop",
            "dataType": "int64",
            "sourceColumn": "is missing fv drop"
          },
          {
            "name": "is hotfix",
            "dataType": "int64",
            "sourceColumn": "is hotfix"
          },
          {
            "name": "is missing icr usingreleases",
            "dataType": "int64",
            "sourceColumn": "is missing icr usingreleases"
          },
          {
            "name": "icr drop filter",
            "dataType": "int64",
            "sourceColumn": "icr drop filter"
          },
          {
            "name": "is missing icr drop",
            "dataType": "int64",
            "sourceColumn": "is missing icr drop"
          },
          {
            "name": "icr doc filter",
            "dataType": "int64",
            "sourceColumn": "icr doc filter"
          },
          {
            "name": "is missing icr doc",
            "dataType": "int64",
            "sourceColumn": "is missing icr doc"
          },
          {
            "name": "ic_or_icr",
            "dataType": "string",
            "sourceColumn": "ic_or_icr"
          },
          {
            "name": "ICR Milestone",
            "dataType": "int64",
            "sourceColumn": "ICR Milestone"
          },
          {
            "type": "calculated",
            "name": "milestone_group",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(indicator_master_list[milestone_group])"
          },
          {
            "name": "IE MilestoneID",
            "dataType": "int64",
            "sourceColumn": "IE MilestoneID"
          },
          {
            "name": "IAC MilestoneID",
            "dataType": "int64",
            "sourceColumn": "IAC MilestoneID"
          },
          {
            "type": "calculated",
            "name": "consolidated_milestoneID",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "SWITCH([milestone_group], \" IC/ICR\", [ICR Milestone], \" IE\", [IE MilestoneID], \"IAC\", [IAC MilestoneID], blank())"
          },
          {
            "type": "calculated",
            "name": "milestone_link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/carbon/planning/milestone-plan/\"&[IpConfigurationId]",
            "dataCategory": "WebUrl"
          },
          {
            "name": "Depth",
            "dataType": "int64",
            "sourceColumn": "Depth"
          },
          {
            "type": "calculated",
            "name": "User_name2",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " // This handles blank User Names so that they are passed in the drill down, we need ot force blank to have a value of \"Blank\" or else will not pass properly in the drill down",
              "IF(ISBLANK(Main[User_Name]), \"*Blank\", Main[User_Name])"
            ]
          },
          {
            "type": "calculated",
            "name": "waiver_reason",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "CONCATENATEX(CALCULATETABLE(di_waivers, FILTER(di_waivers, di_waivers[ItemId] = Main[Configuration]), FILTER(di_waivers, di_waivers[IndicatorId] = Main[IndicatorId] || di_waivers[IndicatorId] = \"0\"), FILTER(di_waivers, di_waivers[SoC] = Main[SoC])), di_waivers[Reason], \", \")"
          }
        ],
        "partitions": [
          {
            "name": "Main",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select ",
                "",
                "[Carbon ProductName],",
                "[DieID],",
                "[DieName],",
                "[soc filter],",
                "[Depth],",
                "[SoC],",
                "[IpConfigurationId, MilestoneId],",
                "[Org],",
                "[old SubOrg],",
                "[Supplier],",
                "[SupplierId],",
                "[IpGenerationId], ",
                "[Generation], ",
                "[old IpFamily],",
                "[IpFamilyId],",
                "[LeadProductId], ",
                "[LeadProduct],",
                "[Domain],",
                "[SubDomain],",
                "[HsdEsId],",
                "[IpType],",
                "[IpConfigurationId],",
                "[Configuration],",
                "[Drop],",
                "[DropType],",
                "[MilestoneId],",
                "[TrendYYYYWW],",
                "[TrendExactDate],",
                "[PorYYYYWW],",
                "[PorExactDate],",
                "[TrendOffSet],",
                "[Complete],",
                "[UsingProductsSummary],",
                "[UsingProducts],",
                "[AffectedProducts],",
                "[Visible], ",
                "[Revision],",
                "[PlanningStatus],",
                "[Reuse],",
                "[TrendChangeReason],",
                "[TrendChangeDate] ,",
                "[is execution drop],",
                "[is sip],",
                "[is hotfix],",
                "[has_UV2],",
                "[has_eFV],",
                "[has_FV],",
                "[cutoff filter],",
                "",
                "[is ip3],",
                "[IP3 Complete],",
                "[IP3 Trend],",
                "[IP3 POR], ",
                "[is icr], ",
                "[ICR Complete], ",
                "[ICR Trend], ",
                "[ICR POR], ",
                "[ICR UsingReleases], ",
                "[ICR_doc],",
                "[ic_or_icr],",
                "[ICR Milestone],",
                "[is missing icr usingreleases],",
                "[is ic], ",
                "[IC Complete], ",
                "[IC Trend], ",
                "[IC POR], ",
                "[IC UsingReleases], ",
                "[IC_doc],",
                "[is missing ic por],",
                "[is ie], ",
                "[IE Complete], ",
                "[IE Trend], ",
                "[IE POR], ",
                "[IE UsingReleases],",
                "[IPEC_doc],",
                "[IE MilestoneID],",
                "[is missing ie por], ",
                " [is missing ie usingreleases],",
                "[is iac], ",
                "[IAC Complete], ",
                "[IAC Trend], ",
                "[IAC POR], ",
                "[IAC UsingReleases], ",
                "[IAC MilestoneID],",
                "[is missing iac por], ",
                "[is missing iac usingreleases],",
                "[IE and IAC diff],",
                "[is mssisng FV],",
                "[is mssisng eFV],",
                "[is mssisng UV2],",
                "[is delivered],",
                "[Indicator],",
                "[IndicatorId],",
                "[Team],",
                "[Team order],",
                "[Indicator order] , ",
                "[Indicator Domain],",
                "[Count of],",
                "[DI Filter],",
                "[IC Filter], ",
                "[IE Filter],",
                "[IAC Filter],",
                "[Late Reason],",
                "[Redrop Reason],",
                "[Mitigation],",
                "[Future Prevention],",
                "[Impact],",
                "[OPS Contact],",
                "[ip contract milestone document],",
                "[Datasheet document],",
                "[TRM document],",
                "[MDG Project Name],",
                "[IsUnrequestable],",
                "[IsRequestable],",
                " [Trigger],",
                "[IpFamilyId, IndicatorId],",
                "[waiver_ItemId],",
                "-- definitions: 1- not available, 2- available, 3- not relevant ",
                "-- missing por",
                "[missing por filter],",
                "[is missing por],",
                "-- missing trend",
                "[missing trend filter],",
                "[is missing trend],",
                "-- stale drop",
                "[stale drop filter],",
                "[is stale drop],",
                "-- late retrospective",
                "[late retrospective filter],",
                "[is missing late retrospective],",
                "-- redrop retrospective",
                "[redrop retrospective filter],",
                "[is missing redrop retrospective],",
                "-- impact retrospective",
                "[impact retrospective filter],",
                "[impact case],",
                "[is missing impact retrospective],",
                "-- ops contact",
                "[ops contact filter],",
                "[is missing ops contact],",
                "-- mdg name",
                " [mdg name filter],",
                "[is missing mdg name],",
                "-- ip contract milestone doc ",
                "[ip contract milestone doc filter],",
                "[is missing ip contract milestone doc],",
                "-- missing parent",
                " [missing parent filter],",
                "[is missing parent],",
                "",
                "-- missing icr drop",
                "[icr drop filter],",
                " [is missing icr drop],",
                "",
                "-- missing ie drop",
                " [ie drop filter],",
                "[is missing ie drop],",
                "",
                "-- ie complete",
                "[ie complete filter],",
                "[is ie complete],",
                "-- missing datasheet",
                "[datasheet filter],",
                "[is missing datasheet],",
                "-- missing trm",
                " [trm filter],",
                " [is missing trm],",
                "-- gladius drops",
                " [gladius drops filter],",
                " [is missing gladius drops],",
                "-- missing has",
                "[has filter],",
                "-- missing osxml",
                "[osxml filter],",
                "-- missing s1",
                " [s1 filter],",
                "-- missing fas",
                "[fas filter],",
                "-- missing swas",
                " [swas filter],",
                "-- missing sdle_s0",
                " [sdle_s0 filter],",
                "-- missing sdle_s1",
                "[sdle_s1 filter],",
                "-- ipec doc",
                " [ipec doc filter],",
                " [is missing ipec doc],",
                "-- missing iac drop",
                " [iac drop filter],",
                " [is missing iac drop],",
                "-- iac complete",
                " [iac complete filter],",
                "[is iac complete],",
                "-- iac trend",
                " [iac trend filter],",
                "[is iac trend],",
                "",
                "-- icr doc",
                "[icr doc filter],",
                " [is missing icr doc],",
                "",
                "-- fv drop",
                " [fv drop filter],",
                "[is missing fv drop]",
                "",
                "",
                "from ",
                "/* old table */",
                "/*IPG_di_main_calc_cached */",
                "IPG_DI_MAIN_CALC_FINAL_CACHED",
                "where SoC is not null"
              ],
              "dataSource": "IBI"
            }
          }
        ],
        "measures": [
          {
            "name": "missing trend a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[MilestoneId]),[MaxDummy]),",
              "FILTER(ALL(Main[is missing trend]), Main[is missing trend]=2)",
              ") "
            ]
          },
          {
            "name": "missing trend t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[MilestoneId]),[MaxDummy]),",
              "FILTER(ALL(Main[missing trend filter]), Main[missing trend filter]=1)",
              ") "
            ]
          },
          {
            "name": "missing trend %",
            "expression": [
              "",
              "ROUND(DIVIDE([missing trend a],[missing trend t],BLANK()),4)"
            ]
          },
          {
            "name": "missing trend VALUE",
            "expression": [
              " ",
              "IF( not([missing trend t]>0),BLANK(),",
              "FORMAT( [missing trend %],\"0.00%\") & \" (\" &[missing trend a] & \"/\" & [missing trend t]& \")\"",
              ")"
            ]
          },
          {
            "name": "stale drop a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[MilestoneId]),[MaxDummy]),",
              "FILTER(ALL(Main[is stale drop]), Main[is stale drop]=2)",
              ") "
            ]
          },
          {
            "name": "stale drop t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[MilestoneId]),[MaxDummy]),",
              "FILTER(ALL(Main[stale drop filter]), Main[stale drop filter]=1)",
              ") "
            ]
          },
          {
            "name": "stale drop %",
            "expression": [
              "",
              "ROUND(DIVIDE([stale drop a],[stale drop t],BLANK()),4)"
            ]
          },
          {
            "name": "stale drop VALUE",
            "expression": [
              " ",
              "IF( not([stale drop t]>0),BLANK(),",
              "FORMAT( [stale drop %],\"0.00%\") & \" (\" &[stale drop a] & \"/\" & [stale drop t]& \")\"",
              ")"
            ]
          },
          {
            "name": "late retrospective a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[MilestoneId]),[MaxDummy]),",
              "FILTER(ALL(Main[is missing late retrospective]), Main[is missing late retrospective]=2)",
              ") "
            ]
          },
          {
            "name": "late retrospective t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[MilestoneId]),[MaxDummy]),",
              "FILTER(ALL(Main[late retrospective filter]), Main[late retrospective filter]=1)",
              ") "
            ]
          },
          {
            "name": "late retrospective %",
            "expression": [
              "",
              "ROUND(DIVIDE([late retrospective a],[late retrospective t],BLANK()),4)"
            ]
          },
          {
            "name": "late retrospective VALUE",
            "expression": [
              " ",
              "IF( not([late retrospective t]>0),BLANK(),",
              "FORMAT( [late retrospective %],\"0.00%\") & \" (\" &[late retrospective a] & \"/\" & [late retrospective t]& \")\"",
              ")"
            ]
          },
          {
            "name": "redrop retrospective a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[MilestoneId]),[MaxDummy]),",
              "FILTER(ALL(Main[is missing redrop retrospective]), Main[is missing redrop retrospective]=2)",
              ") "
            ]
          },
          {
            "name": "redrop retrospective t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[MilestoneId]),[MaxDummy]),",
              "FILTER(ALL(Main[redrop retrospective filter]), Main[redrop retrospective filter]=1)",
              ") "
            ]
          },
          {
            "name": "redrop retrospective %",
            "expression": [
              "",
              "ROUND(DIVIDE([redrop retrospective a],[redrop retrospective t],BLANK()),4)"
            ]
          },
          {
            "name": "redrop retrospective VALUE",
            "expression": [
              " ",
              "IF( not([redrop retrospective t]>0),BLANK(),",
              "FORMAT( [redrop retrospective %],\"0.00%\") & \" (\" &[redrop retrospective a] & \"/\" & [redrop retrospective t]& \")\"",
              ")"
            ]
          },
          {
            "name": "impact retrospective a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[MilestoneId]),[MaxDummy]),",
              "FILTER(ALL(Main[is missing impact retrospective]), Main[is missing impact retrospective]=2)",
              ") "
            ]
          },
          {
            "name": "impact retrospective t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[MilestoneId]),[MaxDummy]),",
              "FILTER(ALL(Main[impact retrospective filter]), Main[impact retrospective filter]=1)",
              ") "
            ]
          },
          {
            "name": "impact retrospective %",
            "expression": [
              "",
              "ROUND(DIVIDE([impact retrospective a],[impact retrospective t],BLANK()),4)"
            ]
          },
          {
            "name": "impact retrospective VALUE",
            "expression": [
              " ",
              "IF( not([impact retrospective t]>0),BLANK(),",
              "FORMAT( [impact retrospective %],\"0.00%\") & \" (\" &[impact retrospective a] & \"/\" & [impact retrospective t]& \")\"",
              ")"
            ]
          },
          {
            "name": "ops contact a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[SupplierId]),[MaxDummy]),",
              "FILTER(ALL(Main[is missing ops contact]), Main[is missing ops contact]=2)",
              ") "
            ]
          },
          {
            "name": "ops contact t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[SupplierId]),[MaxDummy]),",
              "FILTER(ALL(Main[ops contact filter]), Main[ops contact filter]=1)",
              ") "
            ]
          },
          {
            "name": "ops contact %",
            "expression": [
              "",
              "ROUND(DIVIDE([ops contact a],[ops contact t],BLANK()),4)"
            ]
          },
          {
            "name": "ops contact VALUE",
            "expression": [
              " ",
              "IF( not([ops contact t]>0),BLANK(),",
              "FORMAT( [ops contact %],\"0.00%\") & \" (\" &[ops contact a] & \"/\" & [ops contact t]& \")\"",
              ")"
            ]
          },
          {
            "name": "mdg name a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[is missing mdg name]), Main[is missing mdg name]=2)",
              ") "
            ]
          },
          {
            "name": "mdg name t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[mdg name filter]), Main[mdg name filter]=1)",
              ") "
            ]
          },
          {
            "name": "mdg name %",
            "expression": [
              "",
              "ROUND(DIVIDE([mdg name a],[mdg name t],BLANK()),4)"
            ]
          },
          {
            "name": "mdg name VALUE",
            "expression": [
              " ",
              "IF( not([mdg name t]>0),BLANK(),",
              "FORMAT( [mdg name %],\"0.00%\") & \" (\" &[mdg name a] & \"/\" & [mdg name t]& \")\"",
              ")"
            ]
          },
          {
            "name": "VALUE",
            "expression": [
              "IF(COUNTROWS(VALUES(Main[IndicatorId_int]))=1,",
              "SWITCH(MAX(Main[IndicatorId_int]),",
              "8,[missing trend VALUE],",
              "13,[stale drop VALUE],",
              "11,[late retrospective VALUE],",
              "12,[redrop retrospective VALUE],",
              "7,[impact retrospective VALUE],",
              "22,[ops contact VALUE],",
              "20,[missing por VALUE],",
              "4,[ip contract milestone doc VALUE],",
              "3,[missing parent VALUE],",
              "9,[missing ip contacts VALUE],",
              "21,[mdg name VALUE],",
              "26,[ipfamily cleanup VALUE],",
              "27,[supplier cleanup VALUE],",
              "28,[gladius VALUE],",
              "6,[cm name VALUE],",
              "14,[ie VALUE],",
              "29,[icr drop VALUE],",
              "30,[trm VALUE],",
              "15,[datasheet VALUE],",
              "25, [feature ALL VALUE],",
              "31,[feature VALUE],",
              "38,[g_feature VALUE],",
              "32,[gladius drops VALUE],",
              "33,[has VALUE],",
              "34,[osxml VALUE],",
              "35,[sdle_s1 VALUE],",
              "36,[fas VALUE],",
              "37,[swas VALUE],",
              "39,[sdle_s0 VALUE],",
              "40,[ie complete VALUE],",
              "41,[ipec doc VALUE],",
              "42,[internal_feature VALUE],",
              "43,[iac drop VALUE],",
              "44,[iac complete VALUE],",
              "45,[iac trend VALUE],",
              "46,[icr doc VALUE],",
              "52,[fv drop VALUE]",
              ")",
              ")"
            ]
          },
          {
            "name": "RATE",
            "expression": [
              "IF(COUNTROWS(VALUES(Main[IndicatorId_int]))=1,",
              "SWITCH(MAX(Main[IndicatorId_int]),",
              "8,[missing trend %],",
              "13,[stale drop %],",
              "11,[late retrospective %],",
              "12,[redrop retrospective %],",
              "7,[impact retrospective %],",
              "22,[ops contact %],",
              "20,[missing por %],",
              "4,[ip contract milestone doc %],",
              "3,[missing parent %],",
              "9,[missing ip contacts %],",
              "21,[mdg name %],",
              "26,[ipfamily cleanup %],",
              "27,[supplier cleanup %],",
              "28,[gladius %],",
              "6,[cm name %],",
              "14,[ie drop %],",
              "29,[icr drop %],",
              "30,[trm %],",
              "15,[datasheet %],",
              "25,[feature ALL %],",
              "31,[feature %],",
              "38,[g_feature %],",
              "32,[gladius drops %],",
              "33,[has %],",
              "34,[osxml %],",
              "35,[sdle_s1 %],",
              "36,[fas %],",
              "37,[swas %],",
              "39,[sdle_s0 %],",
              "40,[ie complete %],",
              "41,[ipec doc %],",
              "42,[internal_feature %],",
              "43,[iac drop %],",
              "44,[iac complete %],",
              "45,[iac trend %],",
              "46,[icr doc %],",
              "52,[fv drop %]",
              ")",
              ")"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "FINAL VALUE",
            "expression": [
              "",
              "IF(COUNTROWS(VALUES(Main[IndicatorId]))=1,IF(ISBLANK([VALUE]), IF(LEN([waiver]) < 1, blank(), \"WAIVER: \"&[waiver]), [VALUE]),",
              "IF(COUNTROWS(VALUES(Main[Team order]))=1,[VALUE by Team]",
              ", [Total VALUE]))",
              ""
            ]
          },
          {
            "name": "ip contract milestone doc a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[is missing ip contract milestone doc]), Main[is missing ip contract milestone doc]=2)",
              ") "
            ]
          },
          {
            "name": "ip contract milestone doc t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[ip contract milestone doc filter]), Main[ip contract milestone doc filter]=1)",
              ") "
            ]
          },
          {
            "name": "ip contract milestone doc %",
            "expression": [
              "",
              "ROUND(DIVIDE([ip contract milestone doc a],[ip contract milestone doc t],BLANK()),4)"
            ]
          },
          {
            "name": "ip contract milestone doc VALUE",
            "expression": [
              " ",
              "IF( not([ip contract milestone doc t]>0),BLANK(),",
              "FORMAT( [ip contract milestone doc %],\"0.00%\") & \" (\" &[ip contract milestone doc a] & \"/\" & [ip contract milestone doc t]& \")\"",
              ")"
            ]
          },
          {
            "name": "missing parent a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[is missing parent]), Main[is missing parent]=2)",
              ") "
            ]
          },
          {
            "name": "missing parent t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[missing parent filter]), Main[missing parent filter]=1)",
              ") "
            ]
          },
          {
            "name": "missing parent %",
            "expression": [
              "",
              "ROUND(DIVIDE([missing parent a],[missing parent t],BLANK()),4)"
            ]
          },
          {
            "name": "missing parent VALUE",
            "expression": [
              " ",
              "IF( not([missing parent t]>0),BLANK(),",
              "FORMAT( [missing parent %],\"0.00%\") & \" (\" &[missing parent a] & \"/\" & [missing parent t]& \")\"",
              ")"
            ]
          },
          {
            "name": "VALUE by Team",
            "expression": [
              "",
              "IF( not([Team t]>0),BLANK(),",
              "FORMAT( ROUND(DIVIDE([Team a],[Team t],BLANK()),4),\"0.00%\") & \" (\" &[Team a] & \"/\" & [Team t]& \")\"",
              ")",
              ""
            ]
          },
          {
            "name": "Total VALUE",
            "expression": [
              "",
              "IF( NOT([Total t]>0),BLANK(),",
              "FORMAT( ROUND(DIVIDE([Total a],[Total t],BLANK()),4),\"0.00%\") & \" (\" &[Total a] & \"/\" & [Total t]& \")\"",
              ")",
              "",
              ""
            ]
          },
          {
            "name": "RATE by Team",
            "expression": [
              "",
              "IF( not([Team t]>0),BLANK(),",
              "ROUND(DIVIDE([Team a],[Team t],BLANK()),6)",
              ")",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "Total Rate",
            "expression": [
              "",
              "IF(NOT([Total t]>0),BLANK(),",
              "ROUND(DIVIDE([Total a],[Total t],BLANK()),6)",
              ")"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "FINAL RATE",
            "expression": [
              "",
              "IF(COUNTROWS(VALUES(Main[IndicatorId]))=1,[RATE],",
              "IF(COUNTROWS(VALUES(Main[Team order]))=1,[RATE by Team]",
              ", [Total RATE]))",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "missing por a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[MilestoneId]),[MaxDummy]),",
              "FILTER(ALL(Main[is missing por]), Main[is missing por]=2)",
              ") "
            ]
          },
          {
            "name": "missing por t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[MilestoneId]),[MaxDummy]),",
              "FILTER(ALL(Main[missing por filter]), Main[missing por filter]=1)",
              ") "
            ]
          },
          {
            "name": "missing por %",
            "expression": [
              "",
              "ROUND(DIVIDE([missing por a],[missing por t],BLANK()),4)"
            ]
          },
          {
            "name": "missing por VALUE",
            "expression": [
              " ",
              "IF( not([missing por t]>0),BLANK(),",
              "FORMAT( [missing por %],\"0.00%\") & \" (\" &[missing por a] & \"/\" & [missing por t]& \")\"",
              ")"
            ]
          },
          {
            "name": "drill link",
            "expression": [
              "",
              "IF(MAX(Main[IndicatorId]) in{\"25\", \"31\", \"38\", \"42\"} && MAX(features[tenant])= \"JIRA\" ,[drill link feature],[drill link rest])",
              "//IF(MAX(Main[IndicatorId]) in{\"31\", \"38\"} && MAX(features[tenant])= \"JIRA\" ,[drill link rest],[drill link rest])",
              ""
            ]
          },
          {
            "name": "missing ip contacts t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpFamilyId]),[MaxDummy])*5,",
              "FILTER(Main, Main[IndicatorId]=\"9\"),",
              "FILTER(ALL(Main[missing ip contacts filter]), Main[missing ip contacts filter]=1)",
              ") "
            ]
          },
          {
            "name": "missing ip contacts a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(SUMMARIZE('Main',[IpFamilyId],[IndicatorId],\"aa\",max([available ip contacts])),[aa]),",
              "FILTER(Main, Main[IndicatorId]=\"9\"),",
              "FILTER(ALL(release_central_family[missing ip contacts filter]), release_central_family[missing ip contacts filter]=1)",
              ") "
            ]
          },
          {
            "name": "missing ip contacts %",
            "expression": [
              "",
              "ROUND(DIVIDE([missing ip contacts a],[missing ip contacts t],BLANK()),4)"
            ]
          },
          {
            "name": "missing ip contacts VALUE",
            "expression": [
              " ",
              "IF( not([missing ip contacts t]>0),BLANK(),",
              "FORMAT( [missing ip contacts %],\"0.00%\") & \" (\" &[missing ip contacts a] & \"/\" & [missing ip contacts t]& \")\"",
              ")"
            ]
          },
          {
            "name": "ipfamily cleanup a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpFamilyId]),[MaxDummy]),",
              "FILTER(Main, Main[IndicatorId]=\"26\"),",
              "FILTER(ALL(release_central_family[is missing ipfamily cleanup]), release_central_family[is missing ipfamily cleanup]=2)",
              ") "
            ]
          },
          {
            "name": "ipfamily cleanup t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpFamilyId]),[MaxDummy]),",
              "FILTER(Main, Main[IndicatorId]=\"26\"),",
              "FILTER(ALL(Main[ipfamily cleanup filter]), Main[ipfamily cleanup filter]=1)",
              ") "
            ]
          },
          {
            "name": "ipfamily cleanup %",
            "expression": [
              "",
              "ROUND(DIVIDE([ipfamily cleanup a],[ipfamily cleanup t],BLANK()),4)"
            ]
          },
          {
            "name": "ipfamily cleanup VALUE",
            "expression": [
              " ",
              "IF( not([ipfamily cleanup t]>0),BLANK(),",
              "FORMAT( [ipfamily cleanup %],\"0.00%\") & \" (\" &[ipfamily cleanup a] & \"/\" & [ipfamily cleanup t]& \")\"",
              ")"
            ]
          },
          {
            "name": "supplier cleanup a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[SupplierId]),[MaxDummy]),",
              "FILTER(Main, Main[IndicatorId]=\"27\"),",
              "FILTER(ALL(release_central_family[is missing supplier cleanup]), release_central_family[is missing supplier cleanup]=2)",
              ") "
            ]
          },
          {
            "name": "supplier cleanup t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[SupplierId]),[MaxDummy]),",
              "FILTER(Main, Main[IndicatorId]=\"27\"),",
              "FILTER(ALL(Main[supplier cleanup filter]), Main[supplier cleanup filter]=1)",
              ") "
            ]
          },
          {
            "name": "supplier cleanup %",
            "expression": [
              "",
              "ROUND(DIVIDE([supplier cleanup a],[supplier cleanup t],BLANK()),4)"
            ]
          },
          {
            "name": "supplier cleanup VALUE",
            "expression": [
              " ",
              "IF( not([supplier cleanup t]>0),BLANK(),",
              "FORMAT( [supplier cleanup %],\"0.00%\") & \" (\" &[supplier cleanup a] & \"/\" & [supplier cleanup t]& \")\"",
              ")"
            ]
          },
          {
            "name": "gladius a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpFamilyId]),[MaxDummy]),",
              "FILTER(Main, Main[IndicatorId]=\"28\"),",
              "FILTER(ALL(release_central_family[is missing gladius]), release_central_family[is missing gladius]=2)",
              ") "
            ]
          },
          {
            "name": "gladius t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpFamilyId]),[MaxDummy]),",
              "FILTER(Main, Main[IndicatorId]=\"28\"),",
              "FILTER(ALL(Main[gladius filter]), Main[gladius filter]=1)",
              ") "
            ]
          },
          {
            "name": "gladius %",
            "expression": [
              "",
              "ROUND(DIVIDE([gladius a],[gladius t],BLANK()),4)"
            ]
          },
          {
            "name": "gladius VALUE",
            "expression": [
              " ",
              "IF( not([gladius t]>0),BLANK(),",
              "FORMAT( [gladius %],\"0.00%\") & \" (\" &[gladius a] & \"/\" & [gladius t]& \")\"",
              ")"
            ]
          },
          {
            "name": "Team a",
            "expression": [
              "IF(COUNTROWS(VALUES(Main[Team Order int]))=1,",
              "SWITCH(MAX(Main[Team Order int]),",
              "2,",
              "[missing trend a]+[stale drop a]+[late retrospective a]+[redrop retrospective a]+ [missing ip contacts a] + [gladius a]+[missing parent a]+[ipec doc a]+[missing por a]+[gladius drops a]+[iac drop a]+[iac complete a]+[iac trend a]+[icr doc a]+[fv drop a]",
              ",",
              "1,",
              "[impact retrospective a]+[ip contract milestone doc a]+[cm name a]",
              ",",
              "4,",
              "[ops contact a]+[mdg name a]",
              ",",
              "3,",
              "[icr drop a]+[datasheet a]+[ie drop a]+[g_feature a_for_total]+[sdle_s0 a]+[ie complete a]",
              ",",
              "5,",
              "[ipfamily cleanup a]+ [supplier cleanup a]",
              ",",
              "6,",
              "[trm a],",
              "7,",
              "[has a]+[osxml a]+[fas a]+[swas a]+[sdle_s1 a]",
              ",",
              "8,",
              "[feature a_for_total]+[internal_feature a_for_total]",
              "))",
              ""
            ]
          },
          {
            "name": "Team t",
            "expression": [
              "IF(COUNTROWS(VALUES(Main[Team Order int]))=1,",
              "SWITCH(MAX(Main[Team Order int]),",
              "2,",
              "[missing trend t]+[stale drop t]+[late retrospective t]+[redrop retrospective t]+ [missing ip contacts t] + [gladius t]+[missing parent t]+[ipec doc t]+[missing por t]+[gladius drops t]+[iac drop t]+[iac complete t]+[iac trend t]+[icr doc t]+[fv drop t]",
              ",",
              "1,",
              "[impact retrospective t]+[ip contract milestone doc t]+[cm name t]",
              ",",
              "4,",
              "[ops contact t]+[mdg name t]",
              ",",
              "3,",
              "[icr drop t]+[datasheet t]+ [ie drop t]+[g_feature t_for_total]+[sdle_s0 t]+ [ie complete t]",
              ",",
              "5,",
              "[ipfamily cleanup t]+ [supplier cleanup t]",
              ",",
              "6,",
              "[trm t],",
              "7,",
              "[has t]+[osxml t]+[fas t]+[swas t]+[sdle_s1 t]",
              ",",
              "8,",
              "[feature t_for_total]+[internal_feature t_for_total]",
              "))"
            ]
          },
          {
            "name": "Total a",
            "expression": [
              "",
              "",
              "[missing trend a]+[stale drop a]+[late retrospective a]+[redrop retrospective a]+[impact retrospective a]+[ops contact a]+[mdg name a]+[ip contract milestone doc a]+[missing parent a]+[missing por a]+ [missing ip contacts a] +[ipfamily cleanup a]+ [supplier cleanup a]+ [gladius a]+ [cm name a]+[icr drop a]+[datasheet a]+[ie drop a]+[trm a]+[feature a_for_total]+[g_feature a_for_total]+[gladius drops a]+[has a]+[osxml a]+[fas a]+[swas a]+[sdle_s0 a]+ [ie complete a]+[ipec doc a]+[internal_feature a_for_total]+[iac drop a]+[iac trend a]+[iac complete a]+[sdle_s1 a]+[icr doc a]+[fv drop a]",
              "",
              ""
            ]
          },
          {
            "name": "Total t",
            "expression": [
              "",
              "",
              "[missing trend t]+[stale drop t]+[late retrospective t]+[redrop retrospective t]+[impact retrospective t]+[ops contact t]+[mdg name t]+[ip contract milestone doc t]+[missing parent t]+[missing por t]+ [missing ip contacts t] +[ipfamily cleanup t]+ [supplier cleanup t]+ [gladius t]+ [cm name t]+[icr drop t]+[datasheet t]+[ie drop t]+[trm t]+[feature t_for_total]+[g_feature t_for_total]+[gladius drops t]+[has t]+[osxml t]+[fas t]+[swas t]+[sdle_s0 t]+ [ie complete t]+[ipec doc t]+[internal_feature t_for_total]+[iac drop t]+[iac trend t]+[iac complete t]+[sdle_s1 t]+[icr doc t]+[fv drop t]",
              ""
            ]
          },
          {
            "name": "cm name a",
            "expression": [
              " 0+",
              "CALCULATE(SUMX(DISTINCT(main[DieID]),[MaxDummy]),",
              "FILTER(ALL(soc_customers_anchor[is missing cm]), soc_customers_anchor[is missing cm]=2),",
              "FILTER(Main, Main[IndicatorId]=\"6\"),",
              "FILTER(ALL(Main[LeadProduct]), NOT(ISBLANK(Main[LeadProduct])))",
              ") "
            ]
          },
          {
            "name": "cm name t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[DieID]),[MaxDummy]),",
              "FILTER(ALL(soc_customers_anchor[missing cm filter]), soc_customers_anchor[missing cm filter]=1),",
              "FILTER(Main, Main[IndicatorId]=\"6\"),",
              "FILTER(ALL(Main[LeadProduct]), NOT(ISBLANK(Main[LeadProduct])))",
              ") "
            ]
          },
          {
            "name": "cm name %",
            "expression": [
              "",
              "ROUND(DIVIDE([cm name a],[cm name t],BLANK()),4)"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "cm name VALUE",
            "expression": [
              " ",
              "IF( not([cm name t]>0),BLANK(),",
              "FORMAT( [cm name %],\"0.00%\") & \" (\" &[cm name a] & \"/\" & [cm name t]& \")\"",
              ")"
            ]
          },
          {
            "name": "datasheet a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[is missing datasheet]), Main[is missing datasheet]=2)-- ,",
              "",
              "// filtering out soc filter = 1 to allow for all SOCs ",
              "",
              "// FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ")"
            ]
          },
          {
            "name": "datasheet t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[datasheet filter]), Main[datasheet filter]=1)-- ,",
              "",
              "// filtering out soc filter = 1 to pull in all socs",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "datasheet %",
            "expression": [
              "",
              "ROUND(DIVIDE([datasheet a],[datasheet t],BLANK()),4)"
            ]
          },
          {
            "name": "datasheet VALUE",
            "expression": [
              " ",
              "IF( not([datasheet t]>0),BLANK(),",
              "FORMAT( [datasheet %],\"0.00%\") & \" (\" &[datasheet a] & \"/\" & [datasheet t]& \")\"",
              ")"
            ]
          },
          {
            "name": "ie drop a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[is missing ie drop]), Main[is missing ie drop]=2)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ")"
            ]
          },
          {
            "name": "ie drop t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[ie drop filter]), Main[ie drop filter]=1)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "ie drop %",
            "expression": [
              "",
              "ROUND(DIVIDE([ie drop a],[ie drop t],BLANK()),4)"
            ]
          },
          {
            "name": "ie VALUE",
            "expression": [
              " ",
              "",
              "var",
              "ms_trend =  MAX(Main[IE Trend]) ",
              "return",
              "",
              "IF( not([ie drop t]>0),BLANK(),",
              "FORMAT( [ie drop %],\"0%\") & \" (\" &[ie drop a] & \"/\" & [ie drop t]& \")\" & if(HASONEVALUE(Main[Configuration]), ",
              "",
              "\t\tif(ISBLANK(ms_trend), \" [No Trend]\",",
              "\t\t\" [\" & ms_trend & \"]\")",
              "",
              ")",
              "",
              ") "
            ]
          },
          {
            "name": "trm a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[is missing trm]), Main[is missing trm]=2)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ")"
            ]
          },
          {
            "name": "trm t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[trm filter]), Main[trm filter]=1)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "trm %",
            "expression": [
              "",
              "ROUND(DIVIDE([trm a],[trm t],BLANK()),4)"
            ]
          },
          {
            "name": "trm VALUE",
            "expression": [
              " ",
              "IF( not([trm t]>0),BLANK(),",
              "FORMAT( [trm %],\"0.00%\") & \" (\" &[trm a] & \"/\" & [trm t]& \")\"",
              ")"
            ]
          },
          {
            "name": "gladius drops a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[is missing gladius drops]), Main[is missing gladius drops]=2)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ")"
            ]
          },
          {
            "name": "gladius drops t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[gladius drops filter]), Main[gladius drops filter]=1)-- ,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ")"
            ]
          },
          {
            "name": "gladius drops %",
            "expression": [
              "",
              "ROUND(DIVIDE([gladius drops a],[gladius drops t],BLANK()),4)"
            ]
          },
          {
            "name": "gladius drops VALUE",
            "expression": [
              " ",
              "IF( not([gladius drops t]>0),BLANK(),",
              "FORMAT( [gladius drops %],\"0.00%\") & \" (\" &[gladius drops a] & \"/\" & [gladius drops t]& \")\"",
              ")"
            ]
          },
          {
            "name": "feature a",
            "expression": [
              " 0+",
              "CALCULATE(SUMX(DISTINCT(features[feature_id]),[MaxDummy]),",
              "FILTER(ALL(features[is missing feature item]), features[is missing feature item]=2),",
              "FILTER(ALL(features[is_filed_by_customer]), features[is_filed_by_customer]=1),",
              "FILTER(Main,Main[IndicatorId]=\"31\")-- ,",
              "",
              "// filtering out soc filter = 1 to bring in all socs",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              "",
              ") ",
              ""
            ]
          },
          {
            "name": "feature t",
            "expression": [
              " 0+",
              "CALCULATE(SUMX(DISTINCT(features[feature_id]),[MaxDummy]),",
              "FILTER(ALL(features[feature filter]), features[feature filter]=1),",
              "FILTER(ALL(features[is_filed_by_customer]), features[is_filed_by_customer]=1),",
              "FILTER(Main,Main[IndicatorId]=\"31\") -- ,",
              "",
              "// filtering out soc filter = 1 to bring in all soc",
              "",
              "// FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "feature %",
            "expression": [
              "",
              "AVERAGEX(SUMMARIZE('Main',[IpConfigurationId],[IndicatorId],\"aa\",",
              "ROUND(DIVIDE([feature a],[feature t],BLANK()),4))",
              ",[aa])",
              "",
              ""
            ]
          },
          {
            "name": "feature VALUE",
            "expression": [
              " ",
              "IF(not([feature t]>0),BLANK(),",
              "FORMAT( [feature %],\"0.00%\") & \" (\" &[feature a]& \"/\" & [feature t]& \")\"",
              ")"
            ]
          },
          {
            "name": "has a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(all_docs[has_has]), all_docs[has_has]=2),",
              "FILTER(ALL(Main[has filter]), Main[has filter]=1)-- ,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ")"
            ]
          },
          {
            "name": "has t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(all_docs[has_has]),all_docs[has_has]in{1,2}),",
              "FILTER(ALL(Main[has filter]), Main[has filter]=1)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "has %",
            "expression": [
              "",
              "ROUND(DIVIDE([has a],[has t],BLANK()),4)"
            ]
          },
          {
            "name": "has VALUE",
            "expression": [
              " ",
              "IF( not([has t]>0),BLANK(),",
              "FORMAT( [has %],\"0.00%\") & \" (\" &[has a] & \"/\" & [has t]& \")\"",
              ")"
            ]
          },
          {
            "name": "osxml a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(all_docs[id_for_count]),[MaxDummy]),",
              "FILTER(ALL(all_docs[has_osxml]), all_docs[has_osxml]=2),",
              "FILTER(ALL(Main[osxml filter]), Main[osxml filter]=1)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ")"
            ]
          },
          {
            "name": "osxml t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(all_docs[id_for_count]),[MaxDummy]),",
              "FILTER(ALL(all_docs[has_osxml]),all_docs[has_osxml]in{1,2}),",
              "FILTER(ALL(Main[osxml filter]), Main[osxml filter]=1)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "osxml %",
            "expression": [
              "",
              "ROUND(DIVIDE([osxml a],[osxml t],BLANK()),4)"
            ]
          },
          {
            "name": "osxml VALUE",
            "expression": [
              " ",
              "IF( not([osxml t]>0),BLANK(),",
              "FORMAT( [osxml %],\"0.00%\") & \" (\" &[osxml a] & \"/\" & [osxml t]& \")\"",
              ")"
            ]
          },
          {
            "name": "fas a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(all_docs[has_fas]),all_docs[has_fas]=2),",
              "FILTER(ALL(Main[fas filter]), Main[fas filter]=1)--,",
              "",
              "// filtering out soc filter = 1 to bring in all soc",
              "",
              "// FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ")"
            ]
          },
          {
            "name": "fas t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(all_docs[has_fas]),all_docs[has_fas]in{1,2}),",
              "FILTER(ALL(Main[fas filter]), Main[fas filter]=1)-- ,",
              "",
              "// filtering out soc filter = 1 to bring in all socs",
              "",
              "// FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "fas %",
            "expression": [
              "",
              "ROUND(DIVIDE([fas a],[fas t],BLANK()),4)"
            ]
          },
          {
            "name": "fas VALUE",
            "expression": [
              " ",
              "IF( not([fas t]>0),BLANK(),",
              "FORMAT( [fas %],\"0.00%\") & \" (\" &[fas a] & \"/\" & [fas t]& \")\"",
              ")"
            ]
          },
          {
            "name": "swas a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(all_docs[has_swas]), all_docs[has_swas]=2),",
              "FILTER(ALL(Main[swas filter]), Main[swas filter]=1)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ")"
            ]
          },
          {
            "name": "swas t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(all_docs[has_swas]),all_docs[has_swas]in{1,2}),",
              "FILTER(ALL(Main[swas filter]), Main[swas filter]=1)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "swas %",
            "expression": [
              "",
              "ROUND(DIVIDE([swas a],[swas t],BLANK()),4)"
            ]
          },
          {
            "name": "swas VALUE",
            "expression": [
              " ",
              "IF( not([swas t]>0),BLANK(),",
              "FORMAT( [swas %],\"0.00%\") & \" (\" &[swas a] & \"/\" & [swas t]& \")\"",
              ")"
            ]
          },
          {
            "name": "feature t_for_total",
            "expression": [
              " 0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(features[feature filter]), features[feature filter]=1),",
              "FILTER(ALL(features[is_filed_by_customer]), features[is_filed_by_customer]=1),",
              "FILTER(Main,Main[IndicatorId]=\"31\") -- ,",
              "",
              "// bring in all socs",
              "",
              "// FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "feature a_for_total",
            "expression": [
              "",
              "ROUND(",
              "SUMX(SUMMARIZE('Main',[IpConfigurationId],[IndicatorId],\"aa\",",
              "DIVIDE([feature a],[feature t],BLANK()))",
              ",[aa])",
              ",4)"
            ]
          },
          {
            "name": "g_feature a",
            "expression": [
              " 0+",
              "CALCULATE(SUMX(DISTINCT(features[feature_id]),[MaxDummy]),",
              "FILTER(ALL(features[is missing feature item]), features[is missing feature item]=2),",
              "FILTER(ALL(features[is_filed_by_customer]), features[is_filed_by_customer]=1),",
              "FILTER(ALL(features[is_global]), features[is_global]=1),",
              "FILTER(Main,Main[IndicatorId]=\"38\")-- ,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "g_feature t",
            "expression": [
              " 0+",
              "CALCULATE(SUMX(DISTINCT(features[feature_id]),[MaxDummy]),",
              "FILTER(ALL(features[feature filter]), features[feature filter]=1),",
              "FILTER(ALL(features[is_filed_by_customer]), features[is_filed_by_customer]=1),",
              "FILTER(ALL(features[is_global]), features[is_global]=1),",
              "FILTER(Main,Main[IndicatorId]=\"38\")-- ,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "g_feature %",
            "expression": [
              "",
              "AVERAGEX(SUMMARIZE('Main',[IpConfigurationId],[IndicatorId],\"aa\",",
              "ROUND(DIVIDE([g_feature a],[g_feature t],BLANK()),4))",
              ",[aa])"
            ]
          },
          {
            "name": "g_feature VALUE",
            "expression": [
              " ",
              "IF(not([g_feature t]>0),BLANK(),",
              "FORMAT( [g_feature %],\"0.00%\") & \" (\" &[g_feature a]& \"/\" & [g_feature t]& \")\"",
              ")"
            ]
          },
          {
            "name": "g_feature a_for_total",
            "expression": [
              "",
              "ROUND(",
              "SUMX(SUMMARIZE('Main',[IpConfigurationId],[IndicatorId],\"aa\",",
              "DIVIDE([g_feature a],[g_feature t],BLANK()))",
              ",[aa])",
              ",4)"
            ]
          },
          {
            "name": "g_feature t_for_total",
            "expression": [
              " 0+",
              "CALCULATE(SUMX(DISTINCT(Main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(features[feature filter]), features[feature filter]=1),",
              "FILTER(ALL(features[is_filed_by_customer]), features[is_filed_by_customer]=1),",
              "FILTER(ALL(features[is_global]), features[is_global]=1),",
              "FILTER(Main,Main[IndicatorId]=\"38\")-- ,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "drill link feature",
            "expression": [
              "IF(COUNTROWS(VALUES(Main[link step1]))>1,BLANK(),[link_step_1])",
              "//&\" and QueryFeature/dummy eq 'dummy'\"",
              "&",
              "IF(ISFILTERED(Main[IPFamily]), \" and QueryFeature/IPFamily in (\"&CONCATENATEX(VALUES(Main[IPFamily]),\"'\"&[IPFamily]&\"'\", \",\")&\",\"&CONCATENATEX(VALUES(Main[old IpFamily]),\"'\"&[old IpFamily]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(Main[Configuration]), \" and QueryFeature/configuration_with_missing in (\"&CONCATENATEX(VALUES(features[Configuration_with_missing]),\"'\"&[Configuration_with_missing]&\"'\", \",\")&\")\")",
              "",
              "// remove these conditions as per request from Ryan and Bryan in 22ww44 */",
              " //&",
              " //\" and QueryFeature/ww_submitted_date le \"&MIN(features[cutoff date])",
              " //&",
              " //\" and QueryFeature/ReviewReadinessDate le \"&MIN(features[ReviewReadinessDate cutoff date])",
              "&",
              "\" and QueryFeature/hsdes_jira_status ne 'Abandoned'\"",
              "&",
              "\" and QueryFeature/hsdes_jira_status ne 'Deferred'\"",
              "&",
              "\" and QueryFeature/hsdes_jira_status ne 'More Info'\"",
              "&",
              "\" and QueryFeature/hsdes_jira_status ne 'Rejected'\"",
              "&",
              "\" and QueryFeature/SoC_x0020_Die in (\"&CONCATENATEX(VALUES(Main[DieName]),\"'\"&[DieName]&\"'\", \",\")&\")\""
            ]
          },
          {
            "name": "drill link rest",
            "expression": [
              "IF(COUNTROWS(VALUES(Main[link step1]))>1,BLANK(),[link_step_1])",
              "&",
              "IF(COUNTROWS(VALUES(Main[SubOrg]))>1,BLANK(),\" and Main/SubOrg eq '\" &VALUES(Main[SubOrg])&\"'\")",
              "&",
              "IF(ISFILTERED(Main[Team]), \" and Main/Team in (\"&CONCATENATEX(VALUES(Main[Team]),\"'\"&[Team]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(Main[User_name2]), \" and Main/User_name2 in (\"&CONCATENATEX(VALUES(Main[User_name2]),\"'\"&[User_name2]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(soc_customers_anchor[AnchorProduct]), \" and soc_customers_anchor/AnchorProduct in (\"&CONCATENATEX(VALUES(soc_customers_anchor[AnchorProduct]),\"'\"&[AnchorProduct]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(soc_customers_anchor[IPGCustomers]), \" and soc_customers_anchor/IPGCustomers in (\"&CONCATENATEX(VALUES(soc_customers_anchor[IPGCustomers]),\"'\"&[IPGCustomers]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(Main[SubOrg]), \" and Main/SubOrg in (\"&CONCATENATEX(VALUES(Main[SubOrg]),\"'\"&[SubOrg]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(release_central_family[Supplier]), \" and release_central_family/Supplier in (\"&CONCATENATEX(VALUES(release_central_family[Supplier]),\"'\"&[Supplier]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(Main[Configuration]), \" and Main/Configuration in (\"&CONCATENATEX(VALUES(Main[Configuration]),\"'\"&[Configuration]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(Main[IpType]), \" and Main/IpType in (\"&CONCATENATEX(VALUES(Main[IpType]),\"'\"&[IpType]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(Main[LeadProduct]), \" and Main/LeadProduct in (\"&CONCATENATEX(VALUES(Main[LeadProduct]),\"'\"&[LeadProduct]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(Main[Complete]), \" and Main/Complete in (\"&CONCATENATEX(VALUES(Main[Complete]),\"'\"&[Complete]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(Main[IPFamily]), \" and Main/IPFamily in (\"&CONCATENATEX(VALUES(Main[IPFamily]),\"'\"&[IPFamily]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(Main[DieName]), \" and Main/DieName in (\"&CONCATENATEX(VALUES(Main[DieName]),\"'\"&[DieName]&\"'\", \",\")&\")\")",
              "//& -- this is now coming form MAIN DieName, not related",
              "//IF(ISFILTERED(soc_related_ips_and_milestones[DieName]), \" and soc_related_ips_and_milestones/DieName in (\"&CONCATENATEX(VALUES(soc_related_ips_and_milestones[DieName]),\"'\"&[DieName]&\"'\", \",\")&\")\")",
              "//&",
              "//IF(ISFILTERED(soc_related_ips_and_milestones[SoC]), \" and soc_related_ips_and_milestones/SoC in (\"&CONCATENATEX(VALUES(soc_related_ips_and_milestones[SoC]),\"'\"&[SoC]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(Main[TrendExactDate]), \" and Main/TrendExactDate ge '\"&MIN(Main[TrendExactDate])&\"'\")",
              "&",
              "IF(ISFILTERED(Main[TrendExactDate]), \" and Main/TrendExactDate le '\"&MAX(Main[TrendExactDate])&\"'\")",
              "&",
              "IF(ISFILTERED(Main[PorExactDate]), \" and Main/PorExactDate ge '\"&MIN(Main[PorExactDate])&\"'\")",
              "&",
              "IF(ISFILTERED(Main[PorExactDate]), \" and Main/PorExactDate le '\"&MAX(Main[PorExactDate])&\"'\")",
              "",
              ""
            ]
          },
          {
            "name": "link_step_1",
            "expression": [
              "IF(COUNTROWS(VALUES(Main[IndicatorId_int]))>1,BLANK(),",
              "IF(max([IndicatorId_int])=8,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectioneb483c3513c595208a3c?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=13,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection07cc5dd012db564cad01?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=11,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectiona0e6d3719bbc5d705dd7?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=12,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection18dc3929de67e478cb67?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=7,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection71327abac874352ac08a?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=22,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection5ee8d6ac0d88436ba0d2?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=20,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectionc7bf50b8946b27b04ec9?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=4,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection78bebef03a1cb3a12461?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=3,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectionb01f98f575271203393e?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=9,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection24c4f792c358b827dd50?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=21,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectionf6ca70b90e49a8944020?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=26,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection31b3347e166f82858b6d?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=27,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection1863f7f0e70f24ca47de?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=6,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection553c41d0993e6825c04c?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=28,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectiondb7ba29556b21d75e09b?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=14,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectionf14a54f43d74711dcab7?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=29,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectionf3944a83461bfbfaba98?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=30,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectione86d8625371a506b41aa?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=15,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection44aaa0f1946470073422?filter=Main/dummy_filter eq 1\",",
              "",
              "// in 22ww50, removed the logic to go to two different views, only go to the SAME internal view",
              " // for ALL features",
              " // IF(max([IndicatorId_int])=25 && MAX(features[tenant]) =\"JIRA\",\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/87278665-68d6-4dc3-90e7-16a8e3f8cd22/ReportSection1f7ff89cc22c20007309?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=25,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection28cb46b93b0d09484297?filter=Main/dummy_filter eq 1\",",
              "",
              "// for SOC features",
              " //IF(max([IndicatorId_int])=31 && MAX(features[tenant]) =\"JIRA\",\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/87278665-68d6-4dc3-90e7-16a8e3f8cd22/ReportSection1f7ff89cc22c20007309?filter=QueryFeature/summary_team_filed eq 'Customer'\",",
              "IF(max([IndicatorId_int])=31,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection28cb46b93b0d09484297?filter=Main/dummy_filter eq 1 and features/summary_team_filed eq 'Customer'\",",
              "// internal features",
              "// IF(max([IndicatorId_int])=42 && MAX(features[tenant]) =\"JIRA\",\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/87278665-68d6-4dc3-90e7-16a8e3f8cd22/ReportSection1f7ff89cc22c20007309?filter=QueryFeature/summary_team_filed ne 'Customer'\",",
              "IF(max([IndicatorId_int])=42,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection28cb46b93b0d09484297?filter=Main/dummy_filter eq 1 and features/summary_team_filed ne 'Customer'\",",
              "//global features",
              "// IF(max([IndicatorId_int])=38 && MAX(features[tenant]) =\"JIRA\",\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/87278665-68d6-4dc3-90e7-16a8e3f8cd22/ReportSection1f7ff89cc22c20007309?filter=QueryFeature/summary_team_filed eq 'Customer'\",",
              "IF(max([IndicatorId_int])=38,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection28cb46b93b0d09484297?filter=Main/dummy_filter eq 1 and features/is_global eq 1 and features/summary_team_filed eq 'Customer'\",",
              "",
              "",
              "IF(max([IndicatorId_int])=32,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectionaceb9b7dc474ae3865ae?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=41,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectionf91b641a84eba1f2651f?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=43,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectione41de6b81f7b895d2d40?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=45,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectiona9297797f0d93d3f578c?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=46,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSectionfaacf7191dc72e2ad3ca?filter=Main/dummy_filter eq 1\",",
              "IF(max([IndicatorId_int])=52,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/2c3f7fde-dcd4-4925-9585-7cbe51183e3c/ReportSection7f5f541005093c27854c?filter=Main/dummy_filter eq 1\"",
              "",
              "",
              "))))))))))))))))))))))))))))))"
            ]
          },
          {
            "name": "ie complete a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(Main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[is ie complete]), Main[is ie complete]=2)-- ,",
              "",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ")"
            ]
          },
          {
            "name": "ie complete t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(Main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[ie complete filter]), Main[ie complete filter]=1)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "ie complete %",
            "expression": [
              "",
              "ROUND(DIVIDE([ie complete a],[ie complete t],BLANK()),4)"
            ]
          },
          {
            "name": "ie complete VALUE",
            "expression": [
              " ",
              "IF( not([ie complete t]>0),BLANK(),",
              "FORMAT( [ie complete %],\"0.00%\") & \" (\" &[ie complete a] & \"/\" & [ie complete t] & \")\"",
              ")"
            ]
          },
          {
            "name": "ipec doc a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(Main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[is missing ipec doc]), Main[is missing ipec doc]=2)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ")",
              ""
            ]
          },
          {
            "name": "ipec doc t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(Main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[ipec doc filter]), Main[ipec doc filter]=1)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "ipec doc %",
            "expression": [
              "",
              "ROUND(DIVIDE([ipec doc a],[ipec doc t],BLANK()),4)"
            ]
          },
          {
            "name": "ipec doc VALUE",
            "expression": [
              " ",
              "IF( not([ipec doc t]>0),BLANK(),",
              "FORMAT( [ipec doc %],\"0.00%\") & \" (\" &[ipec doc a] & \"/\" & [ipec doc t] & \")\"",
              ")"
            ]
          },
          {
            "name": "internal_feature a",
            "expression": [
              " 0+",
              "CALCULATE(SUMX(DISTINCT(features[feature_id]),[MaxDummy]),",
              "FILTER(ALL(features[is missing feature item]), features[is missing feature item]=2),",
              "FILTER(ALL(features[is_filed_by_customer]), features[is_filed_by_customer]=0),",
              "FILTER(Main,Main[IndicatorId]=\"42\")--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") ",
              ""
            ]
          },
          {
            "name": "internal_feature t",
            "expression": [
              " 0+",
              "CALCULATE(SUMX(DISTINCT(features[feature_id]),[MaxDummy]),",
              "FILTER(ALL(features[feature filter]), features[feature filter]=1),",
              "FILTER(ALL(features[is_filed_by_customer]), features[is_filed_by_customer]=0),",
              "FILTER(Main,Main[IndicatorId]=\"42\")--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") ",
              ""
            ]
          },
          {
            "name": "internal_feature a_for_total",
            "expression": [
              "",
              "ROUND(",
              "SUMX(SUMMARIZE('Main',[IpConfigurationId],[IndicatorId],\"aa\",",
              "DIVIDE([internal_feature a],[internal_feature t],BLANK()))",
              ",[aa])",
              ",4)"
            ]
          },
          {
            "name": "internal_feature %",
            "expression": [
              "",
              "AVERAGEX(SUMMARIZE('Main',[IpConfigurationId],[IndicatorId],\"aa\",",
              "ROUND(DIVIDE([internal_feature a],[internal_feature t],BLANK()),4))",
              ",[aa])",
              ""
            ]
          },
          {
            "name": "internal_feature t_for_total",
            "expression": [
              " 0+",
              "CALCULATE(SUMX(DISTINCT(Main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(features[feature filter]), features[feature filter]=1),",
              "FILTER(ALL(features[is_filed_by_customer]), features[is_filed_by_customer]=0),",
              "FILTER(Main,Main[IndicatorId]=\"42\")--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "internal_feature VALUE",
            "expression": [
              " ",
              "IF(not([internal_feature t]>0),BLANK(),",
              "FORMAT( [internal_feature %],\"0.00%\") & \" (\" &[internal_feature a]& \"/\" & [internal_feature t]& \")\"",
              ")",
              ""
            ]
          },
          {
            "name": "iac drop a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(Main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[is missing iac drop]), Main[is missing iac drop]=2)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ")"
            ]
          },
          {
            "name": "iac drop t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(Main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[iac drop filter]), Main[iac drop filter]=1)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "iac drop %",
            "expression": [
              "",
              "ROUND(DIVIDE([iac drop a],[iac drop t],BLANK()),4)"
            ]
          },
          {
            "name": "iac complete a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(Main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[is iac complete]), Main[is iac complete]=2)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ")"
            ]
          },
          {
            "name": "iac complete t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(Main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[iac complete filter]), Main[iac complete filter]=1)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "iac complete %",
            "expression": [
              "",
              "ROUND(DIVIDE([iac complete a],[iac complete t],BLANK()),4)"
            ]
          },
          {
            "name": "iac complete VALUE",
            "expression": [
              " ",
              "IF( not([iac complete t]>0),BLANK(),",
              "FORMAT( [iac complete %],\"0.00%\") & \" (\" &[iac complete a] & \"/\" & [iac complete t] & \")\"",
              ")"
            ]
          },
          {
            "name": "MaxDummy",
            "expression": "MAX(Main[dummy_filter])"
          },
          {
            "name": "sdle_s0 a",
            "expression": [
              " 0+",
              "CALCULATE(SUMX(DISTINCT(Main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(sdle_project_level_data[MetS0Legend]), sdle_project_level_data[MetS0Legend] in {\"Complete\",\"NA\"}),",
              "FILTER(Main,Main[sdle_s0 filter]=1)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "sdle_s0 t",
            "expression": [
              " 0+",
              "CALCULATE(SUMX(DISTINCT(Main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(sdle_project_level_data[MetS0Legend]), sdle_project_level_data[MetS0Legend] in {\"Incomplete\",\"Complete\",\"Awaiting\",\"NA\"}),",
              "FILTER(Main,Main[sdle_s0 filter]=1)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "sdle_s0 %",
            "expression": [
              "",
              "ROUND(DIVIDE([sdle_s0 a],[sdle_s0 t],BLANK()),4)"
            ]
          },
          {
            "name": "sdle_s0 VALUE",
            "expression": [
              " ",
              "IF(not([sdle_s0 t]>0),BLANK(),",
              "FORMAT( [sdle_s0 %],\"0.00%\") & \" (\" &[sdle_s0 a]& \"/\" & [sdle_s0 t]& \")\"",
              ")"
            ]
          },
          {
            "name": "iac drop VALUE",
            "expression": [
              " ",
              "",
              "var",
              "ms_trend =  MAX(Main[IAC Trend]) ",
              "return",
              "",
              "IF( not([iac drop t]>0),BLANK(),",
              "FORMAT( [iac drop %],\"0%\") & \" (\" &[iac drop a] & \"/\" & [iac drop t]& \")\" & if(HASONEVALUE(Main[Configuration]), ",
              "",
              "\t\tif(ISBLANK(ms_trend), \" [No Trend]\",",
              "\t\t\" [\" & ms_trend & \"]\")",
              "",
              ")",
              "",
              ")",
              ""
            ]
          },
          {
            "name": "iac trend a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(Main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[is iac trend]), Main[is iac trend]=2)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ")"
            ]
          },
          {
            "name": "iac trend t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(Main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[iac trend filter]), Main[iac trend filter]=1)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "iac trend %",
            "expression": [
              "",
              "ROUND(DIVIDE([iac trend a],[iac trend t],BLANK()),4)"
            ]
          },
          {
            "name": "iac trend VALUE",
            "expression": [
              " ",
              "IF( not([iac trend t]>0),BLANK(),",
              "FORMAT( [iac trend %],\"0.00%\") & \" (\" &[iac trend a] & \"/\" & [iac trend t] & \")\"",
              ")"
            ]
          },
          {
            "name": "sdle_s1 a",
            "expression": [
              " 0+",
              "CALCULATE(SUMX(DISTINCT(Main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(sdle_project_level_data[MetS1Legend]), sdle_project_level_data[MetS1Legend] in {\"Complete\",\"NA\"}),",
              "FILTER(Main,Main[sdle_s1 filter]=1)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "sdle_s1 t",
            "expression": [
              " 0+",
              "CALCULATE(SUMX(DISTINCT(Main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(sdle_project_level_data[MetS1Legend]), sdle_project_level_data[MetS1Legend] in {\"Incomplete\",\"Complete\",\"Awaiting\",\"NA\"}),",
              "FILTER(Main,Main[sdle_s1 filter]=1)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "sdle_s1 %",
            "expression": [
              "",
              "ROUND(DIVIDE([sdle_s1 a],[sdle_s1 t],BLANK()),4)"
            ]
          },
          {
            "name": "sdle_s1 VALUE",
            "expression": [
              " ",
              "IF(not([sdle_s1 t]>0),BLANK(),",
              "FORMAT( [sdle_s1 %],\"0.00%\") & \" (\" &[sdle_s1 a]& \"/\" & [sdle_s1 t]& \")\"",
              ")"
            ]
          },
          {
            "name": "fv drop a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[is missing fv drop]), Main[is missing fv drop]=2)--,",
              "",
              "//bring in all socs",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ")"
            ]
          },
          {
            "name": "fv drop t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[fv drop filter]), Main[fv drop filter]=1)--,",
              "",
              "// bring in all socs",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "fv drop %",
            "expression": [
              "",
              "ROUND(DIVIDE([fv drop a],[fv drop t],BLANK()),4)"
            ]
          },
          {
            "name": "fv drop VALUE",
            "expression": [
              " ",
              "IF(not([fv drop t]>0),BLANK(),",
              "FORMAT( [fv drop %],\"0.00%\") & \" (\" &[fv drop a] & \"/\" & [fv drop t]& \")\"",
              ")"
            ]
          },
          {
            "name": "icr drop a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(Main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[is missing icr drop]), Main[is missing icr drop]=2)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ")"
            ]
          },
          {
            "name": "icr drop t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(Main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[icr drop filter]), Main[icr drop filter]=1)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "icr drop %",
            "expression": [
              "",
              "ROUND(DIVIDE([icr drop a],[icr drop t],BLANK()),4)"
            ]
          },
          {
            "name": "icr drop VALUE",
            "expression": [
              " ",
              "var",
              "ic_icr = LASTNONBLANK(Main[ic_or_icr], 1)",
              "return",
              "",
              "var",
              "ms_trend =  MAX(Main[ICR Trend]) ",
              "return",
              "",
              "IF( not([icr drop t]>0),BLANK(),",
              "FORMAT( [icr drop %],\"0%\") & \" (\" &[icr drop a] & \"/\" & [icr drop t]& \")\" &  if(HASONEVALUE(Main[Configuration]), ",
              "\tIF(ISBLANK(ic_icr), \" [No Milestone] \",",
              "\t\" [\" & ic_icr & \": \" & ",
              "\t\tif(ISBLANK(ms_trend), \"No Trend\",",
              "\t\tms_trend)",
              "\t & \"] \" )  , blank() )",
              ")"
            ]
          },
          {
            "name": "icr doc a",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[is missing icr doc]), Main[is missing icr doc]=2)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ")"
            ]
          },
          {
            "name": "icr doc t",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(ALL(Main[icr doc filter]), Main[icr doc filter]=1)--,",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "icr doc %",
            "expression": [
              "",
              "ROUND(DIVIDE([icr doc a],[icr doc t],BLANK()),4)"
            ]
          },
          {
            "name": "icr doc VALUE",
            "expression": [
              " ",
              "IF(not([icr doc t]>0),BLANK(),",
              "FORMAT( [icr doc %],\"0.00%\") & \" (\" &[icr doc a] & \"/\" & [icr doc t]& \")\"",
              ")"
            ]
          },
          {
            "name": "VALUE FINAL",
            "expression": "  SWITCH(LASTNONBLANK(main[milestone_group], 1), \" IC/ICR\", [icr drop VALUE SUMMARY], \" IE\", [ie VALUE SUMMARY], \"IAC\", [iac drop VALUE SUMMARY], [FINAL VALUE])"
          },
          {
            "name": "ie VALUE SUMMARY",
            "expression": [
              " ",
              "",
              "var",
              "ms_trend =  MAX(Main[IE Trend]) ",
              "return",
              "",
              "",
              "[Total VALUE] &  if( (NOT(HASONEVALUE(Main[Indicator])) || MAX(Main[IndicatorId_int]) = 14) && [ie drop t]>0, ",
              "",
              "\t\tif(ISBLANK(ms_trend), \" [No Trend]\",",
              "\t\t\" [\" & ms_trend & \"]\")",
              "",
              ")",
              "",
              ""
            ]
          },
          {
            "name": "iac drop VALUE SUMMARY",
            "expression": [
              " ",
              "",
              "var",
              "ms_trend =  MAX(Main[IAC Trend]) ",
              "return",
              "",
              "[Total VALUE] &  if( (NOT(HASONEVALUE(Main[Indicator])) || MAX(Main[IndicatorId_int]) = 43) && [iac drop t]>0, ",
              "",
              "\t\tif(ISBLANK(ms_trend), \" [No Trend]\",",
              "\t\t\" [\" & ms_trend & \"]\")",
              "",
              ")",
              "",
              "",
              ""
            ]
          },
          {
            "name": "icr drop VALUE SUMMARY",
            "expression": [
              " ",
              "var",
              "ic_icr = LASTNONBLANK(Main[ic_or_icr], 1)",
              "return",
              "",
              "var",
              "ms_trend =  MAX(Main[ICR Trend]) ",
              "return",
              "",
              "[Total VALUE] &  if((NOT(HASONEVALUE(Main[Indicator])) || MAX(Main[IndicatorId_int]) = 29) && [icr drop t]>0,  ",
              "\tIF(ISBLANK(ic_icr), \" [No Milestone] \",",
              "\t\" [\" & ic_icr & \": \" & ",
              "\t\tif(ISBLANK(ms_trend), \"No Trend\",",
              "\t\tms_trend)",
              "\t & \"] \" )  , blank() )",
              ""
            ]
          },
          {
            "name": "readiness_help_msg",
            "expression": "IF(HASONEVALUE(Main[milestone_group]), \"Right Click Milestone column header and Drill Up or unfilter Milestone Details to see all Milestone's Readiness\", \"Right Click Milestone column header Drill Down to see Readiness details\")"
          },
          {
            "name": "ic_icr_milestone_check",
            "expression": "CALCULATE(DISTINCTCOUNT(Main[ICR Milestone]))"
          },
          {
            "name": "ie_milestone_check",
            "expression": "CALCULATE(DISTINCTCOUNT(Main[IE MilestoneID]))"
          },
          {
            "name": "iac_milestone_check",
            "expression": "CALCULATE(DISTINCTCOUNT(Main[IAC MilestoneID]))"
          },
          {
            "name": "milestone_check",
            "expression": "  SWITCH(LASTNONBLANK(main[milestone_group], 1), \" IC/ICR\", [ic_icr_milestone_check], \" IE\", [ie_milestone_check], \"IAC\", [iac_milestone_check], 0)"
          },
          {
            "name": "waiver",
            "expression": " CONCATENATEX(DISTINCT(Main[waiver_reason]), Main[waiver_reason], \";\")"
          },
          {
            "name": "feature ALL a",
            "expression": [
              " 0+",
              "CALCULATE(SUMX(DISTINCT(features[feature_id]),[MaxDummy]),",
              "FILTER(ALL(features[is missing feature item]), features[is missing feature item]=2),",
              "// FILTER(ALL(features[is_filed_by_customer]), features[is_filed_by_customer]=1),",
              "FILTER(Main,Main[IndicatorId]=\"25\")-- ,",
              "",
              "// filtering out soc filter = 1 to bring in all socs",
              "",
              "//FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              "",
              ") ",
              ""
            ]
          },
          {
            "name": "feature ALL t",
            "expression": [
              " 0+",
              "CALCULATE(SUMX(DISTINCT(features[feature_id]),[MaxDummy]),",
              "FILTER(ALL(features[feature filter]), features[feature filter]=1),",
              "// FILTER(ALL(features[is_filed_by_customer]), features[is_filed_by_customer]=1),",
              "FILTER(Main,Main[IndicatorId]=\"25\") -- ,",
              "",
              "// filtering out soc filter = 1 to bring in all soc",
              "",
              "// FILTER(soc_related_ips_and_milestones, soc_related_ips_and_milestones[soc filter]=1)",
              ") "
            ]
          },
          {
            "name": "feature ALL %",
            "expression": [
              "",
              "AVERAGEX(SUMMARIZE('Main',[IpConfigurationId],[IndicatorId],\"aa\",",
              "ROUND(DIVIDE([feature ALL a],[feature ALL t],BLANK()),4))",
              ",[aa])",
              "",
              ""
            ]
          },
          {
            "name": "feature ALL VALUE",
            "expression": [
              " ",
              "IF(not([feature ALL t]>0),BLANK(),",
              "FORMAT( [feature ALL %],\"0.00%\") & \" (\" &[feature ALL a]& \"/\" & [feature ALL t]& \")\"",
              ")"
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select ",
              "top 100000",
              "[Carbon ProductName],",
              "[DieID],",
              "[DieName],",
              "[soc filter],",
              "[Depth],",
              "[SoC],",
              "[IpConfigurationId, MilestoneId],",
              "[Org],",
              "[old SubOrg],",
              "[Supplier],",
              "[SupplierId],",
              "[IpGenerationId], ",
              "[Generation], ",
              "[old IpFamily],",
              "[IpFamilyId],",
              "[LeadProductId], ",
              "[LeadProduct],",
              "[Domain],",
              "[SubDomain],",
              "[HsdEsId],",
              "[IpType],",
              "[IpConfigurationId],",
              "[Configuration],",
              "[Drop],",
              "[DropType],",
              "[MilestoneId],",
              "[TrendYYYYWW],",
              "[TrendExactDate],",
              "[PorYYYYWW],",
              "[PorExactDate],",
              "[TrendOffSet],",
              "[Complete],",
              "[UsingProductsSummary],",
              "[UsingProducts],",
              "[AffectedProducts],",
              "[Visible], ",
              "[Revision],",
              "[PlanningStatus],",
              "[Reuse],",
              "[TrendChangeReason],",
              "[TrendChangeDate] ,",
              "[is execution drop],",
              "[is sip],",
              "[is hotfix],",
              "[has_UV2],",
              "[has_eFV],",
              "[has_FV],",
              "[cutoff filter],",
              "",
              "[is ip3],",
              "[IP3 Complete],",
              "[IP3 Trend],",
              "[IP3 POR], ",
              "[is icr], ",
              "[ICR Complete], ",
              "[ICR Trend], ",
              "[ICR POR], ",
              "[ICR UsingReleases], ",
              "[ICR_doc],",
              "[ic_or_icr],",
              "[ICR Milestone],",
              "[is missing icr usingreleases],",
              "[is ic], ",
              "[IC Complete], ",
              "[IC Trend], ",
              "[IC POR], ",
              "[IC UsingReleases], ",
              "[IC_doc],",
              "[is missing ic por],",
              "[is ie], ",
              "[IE Complete], ",
              "[IE Trend], ",
              "[IE POR], ",
              "[IE UsingReleases],",
              "[IPEC_doc],",
              "[IE MilestoneID],",
              "[is missing ie por], ",
              " [is missing ie usingreleases],",
              "[is iac], ",
              "[IAC Complete], ",
              "[IAC Trend], ",
              "[IAC POR], ",
              "[IAC UsingReleases], ",
              "[IAC MilestoneID],",
              "[is missing iac por], ",
              "[is missing iac usingreleases],",
              "[IE and IAC diff],",
              "[is mssisng FV],",
              "[is mssisng eFV],",
              "[is mssisng UV2],",
              "[is delivered],",
              "[Indicator],",
              "[IndicatorId],",
              "[Team],",
              "[Team order],",
              "[Indicator order] , ",
              "[Indicator Domain],",
              "[Count of],",
              "[DI Filter],",
              "[IC Filter], ",
              "[IE Filter],",
              "[IAC Filter],",
              "[Late Reason],",
              "[Redrop Reason],",
              "[Mitigation],",
              "[Future Prevention],",
              "[Impact],",
              "[OPS Contact],",
              "[ip contract milestone document],",
              "[Datasheet document],",
              "[TRM document],",
              "[MDG Project Name],",
              "[IsUnrequestable],",
              "[IsRequestable],",
              " [Trigger],",
              "[IpFamilyId, IndicatorId],",
              "[waiver_ItemId],",
              "-- definitions: 1- not available, 2- available, 3- not relevant ",
              "-- missing por",
              "[missing por filter],",
              "[is missing por],",
              "-- missing trend",
              "[missing trend filter],",
              "[is missing trend],",
              "-- stale drop",
              "[stale drop filter],",
              "[is stale drop],",
              "-- late retrospective",
              "[late retrospective filter],",
              "[is missing late retrospective],",
              "-- redrop retrospective",
              "[redrop retrospective filter],",
              "[is missing redrop retrospective],",
              "-- impact retrospective",
              "[impact retrospective filter],",
              "[impact case],",
              "[is missing impact retrospective],",
              "-- ops contact",
              "[ops contact filter],",
              "[is missing ops contact],",
              "-- mdg name",
              " [mdg name filter],",
              "[is missing mdg name],",
              "-- ip contract milestone doc ",
              "[ip contract milestone doc filter],",
              "[is missing ip contract milestone doc],",
              "-- missing parent",
              " [missing parent filter],",
              "[is missing parent],",
              "",
              "-- missing icr drop",
              "[icr drop filter],",
              " [is missing icr drop],",
              "",
              "-- missing ie drop",
              " [ie drop filter],",
              "[is missing ie drop],",
              "",
              "-- ie complete",
              "[ie complete filter],",
              "[is ie complete],",
              "-- missing datasheet",
              "[datasheet filter],",
              "[is missing datasheet],",
              "-- missing trm",
              " [trm filter],",
              " [is missing trm],",
              "-- gladius drops",
              " [gladius drops filter],",
              " [is missing gladius drops],",
              "-- missing has",
              "[has filter],",
              "-- missing osxml",
              "[osxml filter],",
              "-- missing s1",
              " [s1 filter],",
              "-- missing fas",
              "[fas filter],",
              "-- missing swas",
              " [swas filter],",
              "-- missing sdle_s0",
              " [sdle_s0 filter],",
              "-- missing sdle_s1",
              "[sdle_s1 filter],",
              "-- ipec doc",
              " [ipec doc filter],",
              " [is missing ipec doc],",
              "-- missing iac drop",
              " [iac drop filter],",
              " [is missing iac drop],",
              "-- iac complete",
              " [iac complete filter],",
              "[is iac complete],",
              "-- iac trend",
              " [iac trend filter],",
              "[is iac trend],",
              "",
              "-- icr doc",
              "[icr doc filter],",
              " [is missing icr doc],",
              "",
              "-- fv drop",
              " [fv drop filter],",
              "[is missing fv drop]",
              "",
              "",
              "from ",
              "/* old table */",
              "/*IPG_di_main_calc_cached */",
              "IPG_DI_MAIN_CALC_FINAL_CACHED",
              "where SoC is not null"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "Main"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
              "top 100000",
              "[Carbon ProductName],",
              "[DieID],",
              "[DieName],",
              "[soc filter],",
              "[Depth],",
              "[SoC],",
              "[IpConfigurationId, MilestoneId],",
              "[Org],",
              "[old SubOrg],",
              "[Supplier],",
              "[SupplierId],",
              "[IpGenerationId], ",
              "[Generation], ",
              "[old IpFamily],",
              "[IpFamilyId],",
              "[LeadProductId], ",
              "[LeadProduct],",
              "[Domain],",
              "[SubDomain],",
              "[HsdEsId],",
              "[IpType],",
              "[IpConfigurationId],",
              "[Configuration],",
              "[Drop],",
              "[DropType],",
              "[MilestoneId],",
              "[TrendYYYYWW],",
              "[TrendExactDate],",
              "[PorYYYYWW],",
              "[PorExactDate],",
              "[TrendOffSet],",
              "[Complete],",
              "[UsingProductsSummary],",
              "[UsingProducts],",
              "[AffectedProducts],",
              "[Visible], ",
              "[Revision],",
              "[PlanningStatus],",
              "[Reuse],",
              "[TrendChangeReason],",
              "[TrendChangeDate] ,",
              "[is execution drop],",
              "[is sip],",
              "[is hotfix],",
              "[has_UV2],",
              "[has_eFV],",
              "[has_FV],",
              "[cutoff filter],",
              "",
              "[is ip3],",
              "[IP3 Complete],",
              "[IP3 Trend],",
              "[IP3 POR], ",
              "[is icr], ",
              "[ICR Complete], ",
              "[ICR Trend], ",
              "[ICR POR], ",
              "[ICR UsingReleases], ",
              "[ICR_doc],",
              "[ic_or_icr],",
              "[ICR Milestone],",
              "[is missing icr usingreleases],",
              "[is ic], ",
              "[IC Complete], ",
              "[IC Trend], ",
              "[IC POR], ",
              "[IC UsingReleases], ",
              "[IC_doc],",
              "[is missing ic por],",
              "[is ie], ",
              "[IE Complete], ",
              "[IE Trend], ",
              "[IE POR], ",
              "[IE UsingReleases],",
              "[IPEC_doc],",
              "[IE MilestoneID],",
              "[is missing ie por], ",
              " [is missing ie usingreleases],",
              "[is iac], ",
              "[IAC Complete], ",
              "[IAC Trend], ",
              "[IAC POR], ",
              "[IAC UsingReleases], ",
              "[IAC MilestoneID],",
              "[is missing iac por], ",
              "[is missing iac usingreleases],",
              "[IE and IAC diff],",
              "[is mssisng FV],",
              "[is mssisng eFV],",
              "[is mssisng UV2],",
              "[is delivered],",
              "[Indicator],",
              "[IndicatorId],",
              "[Team],",
              "[Team order],",
              "[Indicator order] , ",
              "[Indicator Domain],",
              "[Count of],",
              "[DI Filter],",
              "[IC Filter], ",
              "[IE Filter],",
              "[IAC Filter],",
              "[Late Reason],",
              "[Redrop Reason],",
              "[Mitigation],",
              "[Future Prevention],",
              "[Impact],",
              "[OPS Contact],",
              "[ip contract milestone document],",
              "[Datasheet document],",
              "[TRM document],",
              "[MDG Project Name],",
              "[IsUnrequestable],",
              "[IsRequestable],",
              " [Trigger],",
              "[IpFamilyId, IndicatorId],",
              "[waiver_ItemId],",
              "-- definitions: 1- not available, 2- available, 3- not relevant ",
              "-- missing por",
              "[missing por filter],",
              "[is missing por],",
              "-- missing trend",
              "[missing trend filter],",
              "[is missing trend],",
              "-- stale drop",
              "[stale drop filter],",
              "[is stale drop],",
              "-- late retrospective",
              "[late retrospective filter],",
              "[is missing late retrospective],",
              "-- redrop retrospective",
              "[redrop retrospective filter],",
              "[is missing redrop retrospective],",
              "-- impact retrospective",
              "[impact retrospective filter],",
              "[impact case],",
              "[is missing impact retrospective],",
              "-- ops contact",
              "[ops contact filter],",
              "[is missing ops contact],",
              "-- mdg name",
              " [mdg name filter],",
              "[is missing mdg name],",
              "-- ip contract milestone doc ",
              "[ip contract milestone doc filter],",
              "[is missing ip contract milestone doc],",
              "-- missing parent",
              " [missing parent filter],",
              "[is missing parent],",
              "",
              "-- missing icr drop",
              "[icr drop filter],",
              " [is missing icr drop],",
              "",
              "-- missing ie drop",
              " [ie drop filter],",
              "[is missing ie drop],",
              "",
              "-- ie complete",
              "[ie complete filter],",
              "[is ie complete],",
              "-- missing datasheet",
              "[datasheet filter],",
              "[is missing datasheet],",
              "-- missing trm",
              " [trm filter],",
              " [is missing trm],",
              "-- gladius drops",
              " [gladius drops filter],",
              " [is missing gladius drops],",
              "-- missing has",
              "[has filter],",
              "-- missing osxml",
              "[osxml filter],",
              "-- missing s1",
              " [s1 filter],",
              "-- missing fas",
              "[fas filter],",
              "-- missing swas",
              " [swas filter],",
              "-- missing sdle_s0",
              " [sdle_s0 filter],",
              "-- missing sdle_s1",
              "[sdle_s1 filter],",
              "-- ipec doc",
              " [ipec doc filter],",
              " [is missing ipec doc],",
              "-- missing iac drop",
              " [iac drop filter],",
              " [is missing iac drop],",
              "-- iac complete",
              " [iac complete filter],",
              "[is iac complete],",
              "-- iac trend",
              " [iac trend filter],",
              "[is iac trend],",
              "",
              "-- icr doc",
              "[icr doc filter],",
              " [is missing icr doc],",
              "",
              "-- fv drop",
              " [fv drop filter],",
              "[is missing fv drop]",
              "",
              "",
              "from ",
              "/* old table */",
              "/*IPG_di_main_calc_cached */",
              "IPG_DI_MAIN_CALC_FINAL_CACHED",
              "where SoC is not null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "release_central_family",
        "columns": [
          {
            "name": "id",
            "dataType": "int64",
            "sourceColumn": "id",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "IpFamilyId",
            "dataType": "string",
            "sourceColumn": "IpFamilyId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ProductFamily",
            "dataType": "string",
            "sourceColumn": "ProductFamily",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IPFamily",
            "dataType": "string",
            "sourceColumn": "IPFamily",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Gladius",
            "dataType": "string",
            "sourceColumn": "Gladius",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "old IpFamily",
            "dataType": "string",
            "sourceColumn": "old IpFamily"
          },
          {
            "name": "Dev_Lead",
            "dataType": "string",
            "sourceColumn": "Dev_Lead"
          },
          {
            "name": "Product_Owner",
            "dataType": "string",
            "sourceColumn": "Product_Owner"
          },
          {
            "name": "Support_Lead",
            "dataType": "string",
            "sourceColumn": "Support_Lead"
          },
          {
            "name": "Architecture_Lead",
            "dataType": "string",
            "sourceColumn": "Architecture_Lead"
          },
          {
            "name": "Program_Manager",
            "dataType": "string",
            "sourceColumn": "Program_Manager"
          },
          {
            "name": "Supplier",
            "dataType": "string",
            "sourceColumn": "Supplier"
          },
          {
            "name": "is missing ip contacts",
            "dataType": "int64",
            "sourceColumn": "is missing ip contacts"
          },
          {
            "name": "missing ip contacts filter",
            "dataType": "int64",
            "sourceColumn": "missing ip contacts filter"
          },
          {
            "name": "available ip contacts",
            "dataType": "int64",
            "sourceColumn": "available ip contacts"
          },
          {
            "name": "ipfamily cleanup filter",
            "dataType": "int64",
            "sourceColumn": "ipfamily cleanup filter"
          },
          {
            "name": "is missing ipfamily cleanup",
            "dataType": "int64",
            "sourceColumn": "is missing ipfamily cleanup"
          },
          {
            "name": "supplier cleanup filter",
            "dataType": "int64",
            "sourceColumn": "supplier cleanup filter"
          },
          {
            "name": "is missing supplier cleanup",
            "dataType": "int64",
            "sourceColumn": "is missing supplier cleanup"
          },
          {
            "name": "gladius filter",
            "dataType": "int64",
            "sourceColumn": "gladius filter"
          },
          {
            "name": "is missing gladius",
            "dataType": "int64",
            "sourceColumn": "is missing gladius"
          },
          {
            "name": "Supplier hsd id",
            "dataType": "int64",
            "sourceColumn": "Supplier hsd id"
          },
          {
            "name": "SubOrg",
            "dataType": "string",
            "sourceColumn": "SubOrg"
          },
          {
            "name": "Old Supplier",
            "dataType": "string",
            "sourceColumn": "Old Supplier"
          },
          {
            "name": "Description",
            "dataType": "string",
            "sourceColumn": "Description"
          },
          {
            "name": "Execution_Lead",
            "dataType": "string",
            "sourceColumn": "Execution_Lead"
          },
          {
            "type": "calculated",
            "name": "Product_Owner Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(worker_public[User_Name],worker_public[User_Idsid],[Product_Owner])"
          },
          {
            "type": "calculated",
            "name": "Support_Lead Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(worker_public[User_Name],worker_public[User_Idsid],[Support_Lead])"
          },
          {
            "type": "calculated",
            "name": "Architecture_Lead Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(worker_public[User_Name],worker_public[User_Idsid],[Architecture_Lead])"
          },
          {
            "type": "calculated",
            "name": "Program_Manager Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(worker_public[User_Name],worker_public[User_Idsid],[Program_Manager])"
          },
          {
            "type": "calculated",
            "name": "Execution_Lead Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(worker_public[User_Name],worker_public[User_Idsid],[Execution_Lead])"
          },
          {
            "name": "configuration",
            "dataType": "string",
            "sourceColumn": "configuration"
          },
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId"
          }
        ],
        "partitions": [
          {
            "name": "release_central_family",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select ",
                "distinct ",
                "family.*,",
                "supplier.[Supplier hsd id],",
                "-- definitions: 1- available, 2- not available, 3- not relevant ",
                "-- ip contacts",
                "1 as [missing ip contacts filter],",
                "case when [missing ip contacts filter] <> 1 then 3",
                " when  family.[Dev_Lead] is null or family.[Product_Owner] is null or family.[Support_Lead] is null or family.[Architecture_Lead] is null or  family.[Program_Manager] is null then 1 else 2 end as [is missing ip contacts],",
                "case ",
                "\twhen  family.[Dev_Lead] is null then 0 else 1 end +",
                "\tcase when  family.[Product_Owner] is null then 0 else 1 end +",
                "\tcase when   family.[Support_Lead] is null then 0 else 1 end +",
                "\tcase when family.[Architecture_Lead]is null then 0 else 1 end +",
                "\tcase when family.[Program_Manager]  is null then 0 else 1 ",
                "\tend as [available ip contacts],",
                "-- ipfamily cleanup",
                "1 as [ipfamily cleanup filter],",
                "case ",
                "\twhen [ipfamily cleanup filter] <> 1 then 3",
                "\twhen  family.[old IpFamily] =  family.[IpFamily] then 2 else 1 ",
                "\tend as [is missing ipfamily cleanup],",
                "-- supplier cleanup",
                "1 as [supplier cleanup filter],",
                "case ",
                "\twhen [supplier cleanup filter] <> 1 then 3",
                "\twhen  family.[Old Supplier] =  family.[Supplier] then 2 else 1 ",
                "\tend as [is missing supplier cleanup],",
                "-- gladius cleanup",
                "1 as [gladius filter],",
                "case ",
                "\twhen [gladius filter] <> 1 then 3",
                "\twhen  family.[Gladius] is null or lower(family.[Gladius]) = 'tbd' then 1 else 2 ",
                "\tend as [is missing gladius]",
                "from",
                "               (select ",
                "\t\t\t   \t[id] ,",
                "\t\t\t\t[configuration],",
                "\t\t\t\t[IpConfigurationId],",
                "\t\t\t   \t[IpFamilyId],",
                "\t\t\t\t[old_family]as [old IpFamily], ",
                "\t\t\t\t[suborg_supplier]as [ProductFamily],",
                "\t\t\t\t[devsuborg] as [SubOrg],",
                "\t\t\t\t[ip_supplier]as [Supplier],",
                "\t\t\t\t[Family] as [IpFamily],   ",
                "\t\t\t\t[Gladius],",
                "\t\t\t\t[Description],",
                "\t\t\t\t[ip_supplier] as [Old Supplier],",
                "\t\t\t\t[Dev_Lead], ",
                "\t\t\t\t[Execution_Lead], ",
                "\t\t\t\t[Product_Owner],   ",
                "\t\t\t\t[Support_Lead], ",
                "\t\t\t\t[Architecture_Lead],  ",
                "\t\t\t\t[Program_Manager]",
                "\t\t\t\tfrom ",
                "\t\t\t\t-- [v_ipg_family_gladius] converted to new view in 22ww50",
                "\t\t\t\t[v_ipg_contacts]",
                "              ) as family",
                "left join",
                "\t(select [id] as [Supplier hsd id],[supplier.name]",
                "\tFROM  [ES.release_central.supplier]",
                "\twhere [supplier.org] = 'IPG') as supplier",
                "on family.[Old Supplier] = supplier.[supplier.name]"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
                  "distinct ",
                  "family.*,",
                  "supplier.[Supplier hsd id],",
                  "-- definitions: 1- available, 2- not available, 3- not relevant ",
                  "-- ip contacts",
                  "1 as [missing ip contacts filter],",
                  "case when [missing ip contacts filter] <> 1 then 3",
                  " when  family.[Dev_Lead] is null or family.[Product_Owner] is null or family.[Support_Lead] is null or family.[Architecture_Lead] is null or  family.[Program_Manager] is null then 1 else 2 end as [is missing ip contacts],",
                  "case ",
                  "\twhen  family.[Dev_Lead] is null then 0 else 1 end +",
                  "\tcase when  family.[Product_Owner] is null then 0 else 1 end +",
                  "\tcase when   family.[Support_Lead] is null then 0 else 1 end +",
                  "\tcase when family.[Architecture_Lead]is null then 0 else 1 end +",
                  "\tcase when family.[Program_Manager]  is null then 0 else 1 ",
                  "\tend as [available ip contacts],",
                  "-- ipfamily cleanup",
                  "1 as [ipfamily cleanup filter],",
                  "case ",
                  "\twhen [ipfamily cleanup filter] <> 1 then 3",
                  "\twhen  family.[old IpFamily] =  family.[IpFamily] then 2 else 1 ",
                  "\tend as [is missing ipfamily cleanup],",
                  "-- supplier cleanup",
                  "1 as [supplier cleanup filter],",
                  "case ",
                  "\twhen [supplier cleanup filter] <> 1 then 3",
                  "\twhen  family.[Old Supplier] =  family.[Supplier] then 2 else 1 ",
                  "\tend as [is missing supplier cleanup],",
                  "-- gladius cleanup",
                  "1 as [gladius filter],",
                  "case ",
                  "\twhen [gladius filter] <> 1 then 3",
                  "\twhen  family.[Gladius] is null or lower(family.[Gladius]) = 'tbd' then 1 else 2 ",
                  "\tend as [is missing gladius]",
                  "from",
                  "               (select ",
                  "\t\t\t   \t[id] ,",
                  "\t\t\t\t[configuration],",
                  "\t\t\t\t[IpConfigurationId],",
                  "\t\t\t   \t[IpFamilyId],",
                  "\t\t\t\t[old_family]as [old IpFamily], ",
                  "\t\t\t\t[suborg_supplier]as [ProductFamily],",
                  "\t\t\t\t[devsuborg] as [SubOrg],",
                  "\t\t\t\t[ip_supplier]as [Supplier],",
                  "\t\t\t\t[Family] as [IpFamily],   ",
                  "\t\t\t\t[Gladius],",
                  "\t\t\t\t[Description],",
                  "\t\t\t\t[ip_supplier] as [Old Supplier],",
                  "\t\t\t\t[Dev_Lead], ",
                  "\t\t\t\t[Execution_Lead], ",
                  "\t\t\t\t[Product_Owner],   ",
                  "\t\t\t\t[Support_Lead], ",
                  "\t\t\t\t[Architecture_Lead],  ",
                  "\t\t\t\t[Program_Manager]",
                  "\t\t\t\tfrom ",
                  "\t\t\t\t-- [v_ipg_family_gladius] converted to new view in 22ww50",
                  "\t\t\t\t[v_ipg_contacts]",
                  "              ) as family",
                  "left join",
                  "\t(select [id] as [Supplier hsd id],[supplier.name]",
                  "\tFROM  [ES.release_central.supplier]",
                  "\twhere [supplier.org] = 'IPG') as supplier",
                  "on family.[Old Supplier] = supplier.[supplier.name]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select ",
              "distinct ",
              "family.*,",
              "supplier.[Supplier hsd id],",
              "-- definitions: 1- available, 2- not available, 3- not relevant ",
              "-- ip contacts",
              "1 as [missing ip contacts filter],",
              "case when [missing ip contacts filter] <> 1 then 3",
              " when  family.[Dev_Lead] is null or family.[Product_Owner] is null or family.[Support_Lead] is null or family.[Architecture_Lead] is null or  family.[Program_Manager] is null then 1 else 2 end as [is missing ip contacts],",
              "case ",
              "\twhen  family.[Dev_Lead] is null then 0 else 1 end +",
              "\tcase when  family.[Product_Owner] is null then 0 else 1 end +",
              "\tcase when   family.[Support_Lead] is null then 0 else 1 end +",
              "\tcase when family.[Architecture_Lead]is null then 0 else 1 end +",
              "\tcase when family.[Program_Manager]  is null then 0 else 1 ",
              "\tend as [available ip contacts],",
              "-- ipfamily cleanup",
              "1 as [ipfamily cleanup filter],",
              "case ",
              "\twhen [ipfamily cleanup filter] <> 1 then 3",
              "\twhen  family.[old IpFamily] =  family.[IpFamily] then 2 else 1 ",
              "\tend as [is missing ipfamily cleanup],",
              "-- supplier cleanup",
              "1 as [supplier cleanup filter],",
              "case ",
              "\twhen [supplier cleanup filter] <> 1 then 3",
              "\twhen  family.[Old Supplier] =  family.[Supplier] then 2 else 1 ",
              "\tend as [is missing supplier cleanup],",
              "-- gladius cleanup",
              "1 as [gladius filter],",
              "case ",
              "\twhen [gladius filter] <> 1 then 3",
              "\twhen  family.[Gladius] is null or lower(family.[Gladius]) = 'tbd' then 1 else 2 ",
              "\tend as [is missing gladius]",
              "from",
              "               (select ",
              "\t\t\t   \t[id] ,",
              "\t\t\t\t[configuration],",
              "\t\t\t\t[IpConfigurationId],",
              "\t\t\t   \t[IpFamilyId],",
              "\t\t\t\t[old_family]as [old IpFamily], ",
              "\t\t\t\t[suborg_supplier]as [ProductFamily],",
              "\t\t\t\t[devsuborg] as [SubOrg],",
              "\t\t\t\t[ip_supplier]as [Supplier],",
              "\t\t\t\t[Family] as [IpFamily],   ",
              "\t\t\t\t[Gladius],",
              "\t\t\t\t[Description],",
              "\t\t\t\t[ip_supplier] as [Old Supplier],",
              "\t\t\t\t[Dev_Lead], ",
              "\t\t\t\t[Execution_Lead], ",
              "\t\t\t\t[Product_Owner],   ",
              "\t\t\t\t[Support_Lead], ",
              "\t\t\t\t[Architecture_Lead],  ",
              "\t\t\t\t[Program_Manager]",
              "\t\t\t\tfrom ",
              "\t\t\t\t-- [v_ipg_family_gladius] converted to new view in 22ww50",
              "\t\t\t\t[v_ipg_contacts]",
              "              ) as family",
              "left join",
              "\t(select [id] as [Supplier hsd id],[supplier.name]",
              "\tFROM  [ES.release_central.supplier]",
              "\twhere [supplier.org] = 'IPG') as supplier",
              "on family.[Old Supplier] = supplier.[supplier.name]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "release_central_family"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
              "distinct ",
              "family.*,",
              "supplier.[Supplier hsd id],",
              "-- definitions: 1- available, 2- not available, 3- not relevant ",
              "-- ip contacts",
              "1 as [missing ip contacts filter],",
              "case when [missing ip contacts filter] <> 1 then 3",
              " when  family.[Dev_Lead] is null or family.[Product_Owner] is null or family.[Support_Lead] is null or family.[Architecture_Lead] is null or  family.[Program_Manager] is null then 1 else 2 end as [is missing ip contacts],",
              "case ",
              "\twhen  family.[Dev_Lead] is null then 0 else 1 end +",
              "\tcase when  family.[Product_Owner] is null then 0 else 1 end +",
              "\tcase when   family.[Support_Lead] is null then 0 else 1 end +",
              "\tcase when family.[Architecture_Lead]is null then 0 else 1 end +",
              "\tcase when family.[Program_Manager]  is null then 0 else 1 ",
              "\tend as [available ip contacts],",
              "-- ipfamily cleanup",
              "1 as [ipfamily cleanup filter],",
              "case ",
              "\twhen [ipfamily cleanup filter] <> 1 then 3",
              "\twhen  family.[old IpFamily] =  family.[IpFamily] then 2 else 1 ",
              "\tend as [is missing ipfamily cleanup],",
              "-- supplier cleanup",
              "1 as [supplier cleanup filter],",
              "case ",
              "\twhen [supplier cleanup filter] <> 1 then 3",
              "\twhen  family.[Old Supplier] =  family.[Supplier] then 2 else 1 ",
              "\tend as [is missing supplier cleanup],",
              "-- gladius cleanup",
              "1 as [gladius filter],",
              "case ",
              "\twhen [gladius filter] <> 1 then 3",
              "\twhen  family.[Gladius] is null or lower(family.[Gladius]) = 'tbd' then 1 else 2 ",
              "\tend as [is missing gladius]",
              "from",
              "               (select ",
              "\t\t\t   \t[id] ,",
              "\t\t\t\t[configuration],",
              "\t\t\t\t[IpConfigurationId],",
              "\t\t\t   \t[IpFamilyId],",
              "\t\t\t\t[old_family]as [old IpFamily], ",
              "\t\t\t\t[suborg_supplier]as [ProductFamily],",
              "\t\t\t\t[devsuborg] as [SubOrg],",
              "\t\t\t\t[ip_supplier]as [Supplier],",
              "\t\t\t\t[Family] as [IpFamily],   ",
              "\t\t\t\t[Gladius],",
              "\t\t\t\t[Description],",
              "\t\t\t\t[ip_supplier] as [Old Supplier],",
              "\t\t\t\t[Dev_Lead], ",
              "\t\t\t\t[Execution_Lead], ",
              "\t\t\t\t[Product_Owner],   ",
              "\t\t\t\t[Support_Lead], ",
              "\t\t\t\t[Architecture_Lead],  ",
              "\t\t\t\t[Program_Manager]",
              "\t\t\t\tfrom ",
              "\t\t\t\t-- [v_ipg_family_gladius] converted to new view in 22ww50",
              "\t\t\t\t[v_ipg_contacts]",
              "              ) as family",
              "left join",
              "\t(select [id] as [Supplier hsd id],[supplier.name]",
              "\tFROM  [ES.release_central.supplier]",
              "\twhere [supplier.org] = 'IPG') as supplier",
              "on family.[Old Supplier] = supplier.[supplier.name]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "worker_public",
        "columns": [
          {
            "name": "User_Name",
            "dataType": "string",
            "sourceColumn": "User_Name"
          },
          {
            "name": "User_WWID",
            "dataType": "string",
            "sourceColumn": "User_WWID"
          },
          {
            "name": "User_Idsid",
            "dataType": "string",
            "sourceColumn": "User_Idsid"
          }
        ],
        "partitions": [
          {
            "name": "worker_public",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct max([ccMailName]) as [User_Name],max([WWID]) as [User_WWID],[ShortID]as [User_Idsid]",
                "from [WORKER_PUBLIC]",
                "where [IsActive] =1",
                "and [ShortID] is not null",
                "group by [ShortID]"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct max([ccMailName]) as [User_Name],max([WWID]) as [User_WWID],[ShortID]as [User_Idsid]",
                  "from [WORKER_PUBLIC]",
                  "where [IsActive] =1",
                  "and [ShortID] is not null",
                  "group by [ShortID]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct max([ccMailName]) as [User_Name],max([WWID]) as [User_WWID],[ShortID]as [User_Idsid]",
              "from [WORKER_PUBLIC]",
              "where [IsActive] =1",
              "and [ShortID] is not null",
              "group by [ShortID]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "worker_public"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct max([ccMailName]) as [User_Name],max([WWID]) as [User_WWID],[ShortID]as [User_Idsid]",
              "from [WORKER_PUBLIC]",
              "where [IsActive] =1",
              "and [ShortID] is not null",
              "group by [ShortID]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "soc_customers_anchor",
        "columns": [
          {
            "name": "Speed id",
            "dataType": "int64",
            "sourceColumn": "Speed id",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Project",
            "dataType": "string",
            "sourceColumn": "Project",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Segment",
            "dataType": "string",
            "sourceColumn": "Segment",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Customer_Manager",
            "dataType": "string",
            "sourceColumn": "Customer_Manager"
          },
          {
            "name": "Id",
            "dataType": "int64",
            "sourceColumn": "Id"
          },
          {
            "name": "IndicatorId",
            "dataType": "int64",
            "sourceColumn": "IndicatorId"
          },
          {
            "name": "missing cm filter",
            "dataType": "int64",
            "sourceColumn": "missing cm filter"
          },
          {
            "name": "is missing cm",
            "dataType": "int64",
            "sourceColumn": "is missing cm"
          },
          {
            "name": "SoC",
            "dataType": "string",
            "sourceColumn": "SoC"
          },
          {
            "name": "IPGCustomers",
            "dataType": "string",
            "sourceColumn": "IPGCustomers"
          },
          {
            "name": "AnchorProduct",
            "dataType": "string",
            "sourceColumn": "AnchorProduct"
          }
        ],
        "partitions": [
          {
            "name": "soc_customers_anchor",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select anchor.*,product.[Id],product.[Customer_Manager], 6 as [IndicatorId],",
                "--- cm name ",
                "case when  product.[Status] = 'active' then  1 else 2 end as [missing cm filter],",
                "case when [missing cm filter] <> 1 then 3",
                "when product.[Customer_Manager] is null then 1 else 2 end as [is missing cm]",
                "from",
                "\t(select distinct [Project],[Speed id],[Segment],[IPG Customers] as [IPGCustomers],upper([Anchor Product]) as [AnchorProduct], [SoC]",
                "\tfrom [ipg_soc_customers_anchor]) as anchor",
                "left join",
                "\t(select [product.product_code],  [Id],   isnull([product.ip_key_contact],isnull([product.hip_pms],[product.sip_pms])) as [Customer_Manager],[Status],",
                "\tcase when [Status] = 'active' then 1 else 0 end as [is active],",
                "\tcase  when [product.ip_key_contact] is not null then 3 when [product.hip_pms] is not null then 2 when [product.sip_pms] is not null then 1 else 0 end as [is hip sip],",
                "\tRow_number() over (partition by [product.product_code] order by [is active] desc, [is hip sip] desc) as [product priority]",
                "--[product.product_code],  max([Id]) as [Id],  max(isnull([product.hip_pms],[product.sip_pms])) as [Customer_Manager]",
                "\tfrom [ES.release_central.product]",
                "\t) as product ",
                "on anchor.[Speed id] = product.[product.product_code]",
                "where product.[Id] is null or product.[product priority]=1"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select anchor.*,product.[Id],product.[Customer_Manager], 6 as [IndicatorId],",
                  "--- cm name ",
                  "case when  product.[Status] = 'active' then  1 else 2 end as [missing cm filter],",
                  "case when [missing cm filter] <> 1 then 3",
                  "when product.[Customer_Manager] is null then 1 else 2 end as [is missing cm]",
                  "from",
                  "\t(select distinct [Project],[Speed id],[Segment],[IPG Customers] as [IPGCustomers],upper([Anchor Product]) as [AnchorProduct], [SoC]",
                  "\tfrom [ipg_soc_customers_anchor]) as anchor",
                  "left join",
                  "\t(select [product.product_code],  [Id],   isnull([product.ip_key_contact],isnull([product.hip_pms],[product.sip_pms])) as [Customer_Manager],[Status],",
                  "\tcase when [Status] = 'active' then 1 else 0 end as [is active],",
                  "\tcase  when [product.ip_key_contact] is not null then 3 when [product.hip_pms] is not null then 2 when [product.sip_pms] is not null then 1 else 0 end as [is hip sip],",
                  "\tRow_number() over (partition by [product.product_code] order by [is active] desc, [is hip sip] desc) as [product priority]",
                  "--[product.product_code],  max([Id]) as [Id],  max(isnull([product.hip_pms],[product.sip_pms])) as [Customer_Manager]",
                  "\tfrom [ES.release_central.product]",
                  "\t) as product ",
                  "on anchor.[Speed id] = product.[product.product_code]",
                  "where product.[Id] is null or product.[product priority]=1</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select anchor.*,product.[Id],product.[Customer_Manager], 6 as [IndicatorId],",
              "--- cm name ",
              "case when  product.[Status] = 'active' then  1 else 2 end as [missing cm filter],",
              "case when [missing cm filter] <> 1 then 3",
              "when product.[Customer_Manager] is null then 1 else 2 end as [is missing cm]",
              "from",
              "\t(select distinct [Project],[Speed id],[Segment],[IPG Customers] as [IPGCustomers],upper([Anchor Product]) as [AnchorProduct], [SoC]",
              "\tfrom [ipg_soc_customers_anchor]) as anchor",
              "left join",
              "\t(select [product.product_code],  [Id],   isnull([product.ip_key_contact],isnull([product.hip_pms],[product.sip_pms])) as [Customer_Manager],[Status],",
              "\tcase when [Status] = 'active' then 1 else 0 end as [is active],",
              "\tcase  when [product.ip_key_contact] is not null then 3 when [product.hip_pms] is not null then 2 when [product.sip_pms] is not null then 1 else 0 end as [is hip sip],",
              "\tRow_number() over (partition by [product.product_code] order by [is active] desc, [is hip sip] desc) as [product priority]",
              "--[product.product_code],  max([Id]) as [Id],  max(isnull([product.hip_pms],[product.sip_pms])) as [Customer_Manager]",
              "\tfrom [ES.release_central.product]",
              "\t) as product ",
              "on anchor.[Speed id] = product.[product.product_code]",
              "where product.[Id] is null or product.[product priority]=1"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "soc_customers_anchor"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select anchor.*,product.[Id],product.[Customer_Manager], 6 as [IndicatorId],",
              "--- cm name ",
              "case when  product.[Status] = 'active' then  1 else 2 end as [missing cm filter],",
              "case when [missing cm filter] <> 1 then 3",
              "when product.[Customer_Manager] is null then 1 else 2 end as [is missing cm]",
              "from",
              "\t(select distinct [Project],[Speed id],[Segment],[IPG Customers] as [IPGCustomers],upper([Anchor Product]) as [AnchorProduct], [SoC]",
              "\tfrom [ipg_soc_customers_anchor]) as anchor",
              "left join",
              "\t(select [product.product_code],  [Id],   isnull([product.ip_key_contact],isnull([product.hip_pms],[product.sip_pms])) as [Customer_Manager],[Status],",
              "\tcase when [Status] = 'active' then 1 else 0 end as [is active],",
              "\tcase  when [product.ip_key_contact] is not null then 3 when [product.hip_pms] is not null then 2 when [product.sip_pms] is not null then 1 else 0 end as [is hip sip],",
              "\tRow_number() over (partition by [product.product_code] order by [is active] desc, [is hip sip] desc) as [product priority]",
              "--[product.product_code],  max([Id]) as [Id],  max(isnull([product.hip_pms],[product.sip_pms])) as [Customer_Manager]",
              "\tfrom [ES.release_central.product]",
              "\t) as product ",
              "on anchor.[Speed id] = product.[product.product_code]",
              "where product.[Id] is null or product.[product priority]=1</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "soc_related_ips_and_milestones",
        "columns": [
          {
            "name": "Carbon ProductName",
            "dataType": "string",
            "sourceColumn": "Carbon ProductName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DieID",
            "dataType": "int64",
            "sourceColumn": "DieID",
            "sourceProviderType": "Integer"
          },
          {
            "name": "DieName",
            "dataType": "string",
            "sourceColumn": "DieName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "soc filter",
            "dataType": "int64",
            "sourceColumn": "soc filter"
          },
          {
            "name": "SoC",
            "dataType": "string",
            "sourceColumn": "SoC"
          },
          {
            "type": "calculated",
            "name": "IpConfigurationId, DieID",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[IpConfigurationId]&\", \"& [DieID]"
          }
        ],
        "partitions": [
          {
            "name": "soc_related_ips_and_milestones",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct",
                "[Carbon ProductName],[DieID],[DieName],[Configuration],[IpConfigurationId],",
                "case when [DieName]in (select [DieName] from [ipg_ie_die_list]) then 1 else 0 end as [soc filter],",
                "case when lower([DieName]) like '%lunar%' then 'Lunar Lake'",
                "when  lower([DieName]) like '%diamond rapids%' then 'Diamond Rapids' ",
                "when  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'",
                "else DieName end as [SoC]",
                "from [ipg_soc_related_ips_and_milestones]",
                "where  [IpConfigurationId] is not null",
                "and [DieID]is not null"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
                  "[Carbon ProductName],[DieID],[DieName],[Configuration],[IpConfigurationId],",
                  "case when [DieName]in (select [DieName] from [ipg_ie_die_list]) then 1 else 0 end as [soc filter],",
                  "case when lower([DieName]) like '%lunar%' then 'Lunar Lake'",
                  "when  lower([DieName]) like '%diamond rapids%' then 'Diamond Rapids' ",
                  "when  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'",
                  "else DieName end as [SoC]",
                  "from [ipg_soc_related_ips_and_milestones]",
                  "where  [IpConfigurationId] is not null",
                  "and [DieID]is not null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct",
              "[Carbon ProductName],[DieID],[DieName],[Configuration],[IpConfigurationId],",
              "case when [DieName]in (select [DieName] from [ipg_ie_die_list]) then 1 else 0 end as [soc filter],",
              "case when lower([DieName]) like '%lunar%' then 'Lunar Lake'",
              "when  lower([DieName]) like '%diamond rapids%' then 'Diamond Rapids' ",
              "when  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'",
              "else DieName end as [SoC]",
              "from [ipg_soc_related_ips_and_milestones]",
              "where  [IpConfigurationId] is not null",
              "and [DieID]is not null"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "soc_related_ips_and_milestones"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
              "[Carbon ProductName],[DieID],[DieName],[Configuration],[IpConfigurationId],",
              "case when [DieName]in (select [DieName] from [ipg_ie_die_list]) then 1 else 0 end as [soc filter],",
              "case when lower([DieName]) like '%lunar%' then 'Lunar Lake'",
              "when  lower([DieName]) like '%diamond rapids%' then 'Diamond Rapids' ",
              "when  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'",
              "else DieName end as [SoC]",
              "from [ipg_soc_related_ips_and_milestones]",
              "where  [IpConfigurationId] is not null",
              "and [DieID]is not null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "features",
        "columns": [
          {
            "name": "SoC Die",
            "dataType": "string",
            "sourceColumn": "SoC Die",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "release",
            "dataType": "string",
            "sourceColumn": "release",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "feature_id",
            "dataType": "int64",
            "sourceColumn": "feature_id",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "feature_owner",
            "dataType": "string",
            "sourceColumn": "feature_owner",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "feature_title",
            "dataType": "string",
            "sourceColumn": "feature_title",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "is_global",
            "dataType": "int64",
            "sourceColumn": "is_global",
            "sourceProviderType": "Integer"
          },
          {
            "name": "AlphaMilestoneID",
            "dataType": "string",
            "sourceColumn": "AlphaMilestoneID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "BetaMilestoneID",
            "dataType": "string",
            "sourceColumn": "BetaMilestoneID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ProdMilestoneID",
            "dataType": "string",
            "sourceColumn": "ProdMilestoneID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "AlphaDrop",
            "dataType": "string",
            "sourceColumn": "AlphaDrop",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "BetaDrop",
            "dataType": "string",
            "sourceColumn": "BetaDrop",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ProdDrop",
            "dataType": "string",
            "sourceColumn": "ProdDrop",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "AlphaTrend",
            "dataType": "string",
            "sourceColumn": "AlphaTrend",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "BetaTrend",
            "dataType": "string",
            "sourceColumn": "BetaTrend",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ProdTrend",
            "dataType": "string",
            "sourceColumn": "ProdTrend",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "feature_status_to_change",
            "dataType": "int64",
            "sourceColumn": "feature_status_to_change",
            "sourceProviderType": "Integer"
          },
          {
            "name": "feature_is_missing_drop",
            "dataType": "int64",
            "sourceColumn": "feature_is_missing_drop",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is missing feature item",
            "dataType": "int64",
            "sourceColumn": "is missing feature item"
          },
          {
            "name": "feature filter",
            "dataType": "int64",
            "sourceColumn": "feature filter"
          },
          {
            "type": "calculated",
            "name": "HSD Link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/article/#/\"&[feature_id]",
            "dataCategory": "WebUrl"
          },
          {
            "name": "feature_url",
            "dataType": "string",
            "sourceColumn": "feature_url",
            "dataCategory": "WebUrl"
          },
          {
            "name": "tenant",
            "dataType": "string",
            "sourceColumn": "tenant"
          },
          {
            "name": "feature_ww_submitted_date",
            "dataType": "int64",
            "sourceColumn": "feature_ww_submitted_date"
          },
          {
            "name": "feature_status",
            "dataType": "string",
            "sourceColumn": "feature_status"
          },
          {
            "name": "cutoff date",
            "dataType": "int64",
            "sourceColumn": "cutoff date"
          },
          {
            "name": "SoC",
            "dataType": "string",
            "sourceColumn": "SoC"
          },
          {
            "type": "calculated",
            "name": "Configuration, SoC",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[release_for_key]&\", \"&[SoC]"
          },
          {
            "name": "ReviewReadinessDate cutoff date",
            "dataType": "int64",
            "sourceColumn": "ReviewReadinessDate cutoff date"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration"
          },
          {
            "type": "calculated",
            "name": "Configuration_with_missing",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF(ISBLANK([Configuration]),\"missing\",[Configuration])"
          },
          {
            "name": "family",
            "dataType": "string",
            "sourceColumn": "family"
          },
          {
            "name": "old_family",
            "dataType": "string",
            "sourceColumn": "old_family"
          },
          {
            "type": "calculated",
            "name": "release_for_key",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([tenant]=\"JIRA\" &&(ISBLANK([Configuration])||[Configuration]=\"\"),[old_family],[release])"
          },
          {
            "name": "id_index_for_sdle",
            "dataType": "int64",
            "sourceColumn": "id_index_for_sdle"
          },
          {
            "name": "jira_id_for_sdle",
            "dataType": "string",
            "sourceColumn": "jira_id_for_sdle"
          },
          {
            "name": "feature_id_for_sdle",
            "dataType": "string",
            "sourceColumn": "feature_id_for_sdle"
          },
          {
            "name": "feature_SoC",
            "dataType": "string",
            "sourceColumn": "feature_SoC"
          },
          {
            "name": "summary_team_filed",
            "dataType": "string",
            "sourceColumn": "summary_team_filed"
          },
          {
            "type": "calculated",
            "name": "is_filed_by_customer",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([summary_team_filed]= \"Customer\",1,0)"
          },
          {
            "name": "milestone_open",
            "dataType": "string",
            "sourceColumn": "milestone_open"
          },
          {
            "type": "calculated",
            "name": "feature_status_color",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(ISBLANK([feature filter]), blank(), IF([feature_status_to_change] = 1, 1, 2))"
          },
          {
            "type": "calculated",
            "name": "alpha_drop_color",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(ISBLANK([feature filter]), blank(), IF(ISBLANK([AlphaDrop]), 1, 2))"
          },
          {
            "type": "calculated",
            "name": "beta_drop_color",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(ISBLANK([feature filter]), blank(), IF(ISBLANK([BetaDrop]), 1, 2))"
          },
          {
            "type": "calculated",
            "name": "prod_drop_color",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(ISBLANK([feature filter]), blank(), IF(ISBLANK([ProdDrop]), 1, 2))"
          },
          {
            "name": "key",
            "dataType": "string",
            "sourceColumn": "key"
          }
        ],
        "partitions": [
          {
            "name": "features",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select * from ",
                "ipg_di_feature_cached"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from ",
                  "ipg_di_feature_cached</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select * from ",
              "ipg_di_feature_cached"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "features"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from ",
              "ipg_di_feature_cached</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "configuration_key",
        "columns": [
          {
            "name": "IpFamily",
            "dataType": "string",
            "sourceColumn": "IpFamily",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "configuration_key",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select [IpFamily],[IpConfigurationId],[Name]as [Configuration]",
                "from [V_IPG_CARBON_IPCONFIGURATION]",
                "where [Org] = 'IPG'",
                "and [Name]<> ''"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select [IpFamily],[IpConfigurationId],[Name]as [Configuration]",
                  "from [V_IPG_CARBON_IPCONFIGURATION]",
                  "where [Org] = 'IPG'",
                  "and [Name]<> ''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select [IpFamily],[IpConfigurationId],[Name]as [Configuration]",
              "from [V_IPG_CARBON_IPCONFIGURATION]",
              "where [Org] = 'IPG'",
              "and [Name]<> ''"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "configuration_key"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select [IpFamily],[IpConfigurationId],[Name]as [Configuration]",
              "from [V_IPG_CARBON_IPCONFIGURATION]",
              "where [Org] = 'IPG'",
              "and [Name]<> ''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "manual_docs",
        "columns": [
          {
            "name": "f_soc",
            "dataType": "string",
            "sourceColumn": "f_soc",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "has_status",
            "dataType": "string",
            "sourceColumn": "has_status"
          },
          {
            "name": "osxml_status",
            "dataType": "string",
            "sourceColumn": "osxml_status"
          },
          {
            "name": "fas_status",
            "dataType": "string",
            "sourceColumn": "fas_status"
          },
          {
            "name": "swas_status",
            "dataType": "string",
            "sourceColumn": "swas_status"
          },
          {
            "name": "s1_status",
            "dataType": "string",
            "sourceColumn": "s1_status"
          },
          {
            "name": "has_value",
            "dataType": "string",
            "sourceColumn": "has_value"
          },
          {
            "name": "osxml_value",
            "dataType": "string",
            "sourceColumn": "osxml_value"
          },
          {
            "name": "fas_value",
            "dataType": "string",
            "sourceColumn": "fas_value"
          },
          {
            "name": "swas_value",
            "dataType": "string",
            "sourceColumn": "swas_value"
          },
          {
            "name": "s1_value",
            "dataType": "string",
            "sourceColumn": "s1_value"
          },
          {
            "name": "has_has",
            "dataType": "int64",
            "sourceColumn": "has_has"
          },
          {
            "name": "has_osxml",
            "dataType": "int64",
            "sourceColumn": "has_osxml"
          },
          {
            "name": "has_fas",
            "dataType": "int64",
            "sourceColumn": "has_fas"
          },
          {
            "name": "has_swas",
            "dataType": "int64",
            "sourceColumn": "has_swas"
          },
          {
            "name": "has_s1",
            "dataType": "int64",
            "sourceColumn": "has_s1"
          },
          {
            "name": "f_ipconfigurationid",
            "dataType": "int64",
            "sourceColumn": "f_ipconfigurationid"
          },
          {
            "type": "calculated",
            "name": "configuration",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(configuration_key[Configuration],configuration_key[IpConfigurationId],manual_docs[f_ipconfigurationid])"
          }
        ],
        "partitions": [
          {
            "name": "manual_docs",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select docs_data.*,",
                "-- definitions: 1- missing, 2- available, 3- not relevant ",
                "case when HAS_status = 'N/A' then 3",
                "when HAS_status = 'Done' or (HAS_status = 'Date' and (right(HAS_value,4)||left(HAS_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_HAS,",
                "case when OSXML_status = 'N/A' then 3",
                "when OSXML_status = 'Done' or (OSXML_status = 'Date' and (right(OSXML_value,4)||left(OSXML_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_OSXML,",
                "case when FAS_status = 'N/A' then 3",
                "when FAS_status = 'Done' or (FAS_status = 'Date' and (right(FAS_value,4)||left(FAS_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_FAS,",
                "case when SWAS_status = 'N/A' then 3",
                "when SWAS_status = 'Done' or (SWAS_status = 'Date' and (right(SWAS_value,4)||left(SWAS_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_SWAS,",
                "case when S1_status = 'N/A' then 3",
                "when S1_status = 'Done' or (S1_status = 'Date' and (right(S1_value,4)||left(S1_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_S1",
                "from",
                "\t(select distinct f_soc, f_ipconfigurationid,",
                "\tmax(case when f_document_name = 'HAS' then f_document_status end) as HAS_status,",
                "\tmax(case when f_document_name = 'OSXML' then f_document_status end) as OSXML_status,",
                "\tmax(case when f_document_name = 'FAS' then f_document_status end) as FAS_status,",
                "\tmax(case when f_document_name = 'SWAS' then f_document_status end) as SWAS_status,",
                "\tmax(case when f_document_name = 'S1' then f_document_status end) as S1_status,",
                "\tmax(case when f_document_name = 'HAS' then f_document_value end) as HAS_value,",
                "\tmax(case when f_document_name = 'OSXML' then f_document_value end) as OSXML_value,",
                "\tmax(case when f_document_name = 'FAS' then f_document_value end) as FAS_value,",
                "\tmax(case when f_document_name = 'SWAS' then f_document_value end) as SWAS_value,",
                "\tmax(case when f_document_name = 'S1' then f_document_value end) as S1_value",
                "\tfrom t_ie_initiative",
                "\twhere f_etime is null",
                "\tgroup by f_soc, f_ipconfigurationid) as docs_data"
              ],
              "dataSource": "actis_db"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select docs_data.*,",
                  "-- definitions: 1- missing, 2- available, 3- not relevant ",
                  "case when HAS_status = 'N/A' then 3",
                  "when HAS_status = 'Done' or (HAS_status = 'Date' and (right(HAS_value,4)||left(HAS_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_HAS,",
                  "case when OSXML_status = 'N/A' then 3",
                  "when OSXML_status = 'Done' or (OSXML_status = 'Date' and (right(OSXML_value,4)||left(OSXML_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_OSXML,",
                  "case when FAS_status = 'N/A' then 3",
                  "when FAS_status = 'Done' or (FAS_status = 'Date' and (right(FAS_value,4)||left(FAS_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_FAS,",
                  "case when SWAS_status = 'N/A' then 3",
                  "when SWAS_status = 'Done' or (SWAS_status = 'Date' and (right(SWAS_value,4)||left(SWAS_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_SWAS,",
                  "case when S1_status = 'N/A' then 3",
                  "when S1_status = 'Done' or (S1_status = 'Date' and (right(S1_value,4)||left(S1_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_S1",
                  "from",
                  "\t(select distinct f_soc, f_ipconfigurationid,",
                  "\tmax(case when f_document_name = 'HAS' then f_document_status end) as HAS_status,",
                  "\tmax(case when f_document_name = 'OSXML' then f_document_status end) as OSXML_status,",
                  "\tmax(case when f_document_name = 'FAS' then f_document_status end) as FAS_status,",
                  "\tmax(case when f_document_name = 'SWAS' then f_document_status end) as SWAS_status,",
                  "\tmax(case when f_document_name = 'S1' then f_document_status end) as S1_status,",
                  "\tmax(case when f_document_name = 'HAS' then f_document_value end) as HAS_value,",
                  "\tmax(case when f_document_name = 'OSXML' then f_document_value end) as OSXML_value,",
                  "\tmax(case when f_document_name = 'FAS' then f_document_value end) as FAS_value,",
                  "\tmax(case when f_document_name = 'SWAS' then f_document_value end) as SWAS_value,",
                  "\tmax(case when f_document_name = 'S1' then f_document_value end) as S1_value",
                  "\tfrom t_ie_initiative",
                  "\twhere f_etime is null",
                  "\tgroup by f_soc, f_ipconfigurationid) as docs_data</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select docs_data.*,",
              "-- definitions: 1- missing, 2- available, 3- not relevant ",
              "case when HAS_status = 'N/A' then 3",
              "when HAS_status = 'Done' or (HAS_status = 'Date' and (right(HAS_value,4)||left(HAS_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_HAS,",
              "case when OSXML_status = 'N/A' then 3",
              "when OSXML_status = 'Done' or (OSXML_status = 'Date' and (right(OSXML_value,4)||left(OSXML_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_OSXML,",
              "case when FAS_status = 'N/A' then 3",
              "when FAS_status = 'Done' or (FAS_status = 'Date' and (right(FAS_value,4)||left(FAS_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_FAS,",
              "case when SWAS_status = 'N/A' then 3",
              "when SWAS_status = 'Done' or (SWAS_status = 'Date' and (right(SWAS_value,4)||left(SWAS_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_SWAS,",
              "case when S1_status = 'N/A' then 3",
              "when S1_status = 'Done' or (S1_status = 'Date' and (right(S1_value,4)||left(S1_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_S1",
              "from",
              "\t(select distinct f_soc, f_ipconfigurationid,",
              "\tmax(case when f_document_name = 'HAS' then f_document_status end) as HAS_status,",
              "\tmax(case when f_document_name = 'OSXML' then f_document_status end) as OSXML_status,",
              "\tmax(case when f_document_name = 'FAS' then f_document_status end) as FAS_status,",
              "\tmax(case when f_document_name = 'SWAS' then f_document_status end) as SWAS_status,",
              "\tmax(case when f_document_name = 'S1' then f_document_status end) as S1_status,",
              "\tmax(case when f_document_name = 'HAS' then f_document_value end) as HAS_value,",
              "\tmax(case when f_document_name = 'OSXML' then f_document_value end) as OSXML_value,",
              "\tmax(case when f_document_name = 'FAS' then f_document_value end) as FAS_value,",
              "\tmax(case when f_document_name = 'SWAS' then f_document_value end) as SWAS_value,",
              "\tmax(case when f_document_name = 'S1' then f_document_value end) as S1_value",
              "\tfrom t_ie_initiative",
              "\twhere f_etime is null",
              "\tgroup by f_soc, f_ipconfigurationid) as docs_data"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "manual_docs"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select docs_data.*,",
              "-- definitions: 1- missing, 2- available, 3- not relevant ",
              "case when HAS_status = 'N/A' then 3",
              "when HAS_status = 'Done' or (HAS_status = 'Date' and (right(HAS_value,4)||left(HAS_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_HAS,",
              "case when OSXML_status = 'N/A' then 3",
              "when OSXML_status = 'Done' or (OSXML_status = 'Date' and (right(OSXML_value,4)||left(OSXML_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_OSXML,",
              "case when FAS_status = 'N/A' then 3",
              "when FAS_status = 'Done' or (FAS_status = 'Date' and (right(FAS_value,4)||left(FAS_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_FAS,",
              "case when SWAS_status = 'N/A' then 3",
              "when SWAS_status = 'Done' or (SWAS_status = 'Date' and (right(SWAS_value,4)||left(SWAS_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_SWAS,",
              "case when S1_status = 'N/A' then 3",
              "when S1_status = 'Done' or (S1_status = 'Date' and (right(S1_value,4)||left(S1_value,2))::int>=\"DateToYYYYWW\"(CURRENT_DATE)) then 2 else 1 end as has_S1",
              "from",
              "\t(select distinct f_soc, f_ipconfigurationid,",
              "\tmax(case when f_document_name = 'HAS' then f_document_status end) as HAS_status,",
              "\tmax(case when f_document_name = 'OSXML' then f_document_status end) as OSXML_status,",
              "\tmax(case when f_document_name = 'FAS' then f_document_status end) as FAS_status,",
              "\tmax(case when f_document_name = 'SWAS' then f_document_status end) as SWAS_status,",
              "\tmax(case when f_document_name = 'S1' then f_document_status end) as S1_status,",
              "\tmax(case when f_document_name = 'HAS' then f_document_value end) as HAS_value,",
              "\tmax(case when f_document_name = 'OSXML' then f_document_value end) as OSXML_value,",
              "\tmax(case when f_document_name = 'FAS' then f_document_value end) as FAS_value,",
              "\tmax(case when f_document_name = 'SWAS' then f_document_value end) as SWAS_value,",
              "\tmax(case when f_document_name = 'S1' then f_document_value end) as S1_value",
              "\tfrom t_ie_initiative",
              "\twhere f_etime is null",
              "\tgroup by f_soc, f_ipconfigurationid) as docs_data</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "jira_docs",
        "columns": [
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "has_HAS",
            "dataType": "int64",
            "sourceColumn": "has_HAS",
            "sourceProviderType": "Integer"
          },
          {
            "name": "has_OSXML",
            "dataType": "int64",
            "sourceColumn": "has_OSXML",
            "sourceProviderType": "Integer"
          },
          {
            "name": "has_FAS",
            "dataType": "int64",
            "sourceColumn": "has_FAS",
            "sourceProviderType": "Integer"
          },
          {
            "name": "has_SWAS",
            "dataType": "int64",
            "sourceColumn": "has_SWAS",
            "sourceProviderType": "Integer"
          },
          {
            "type": "calculated",
            "name": "IpConfigurationId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(configuration_key[IpConfigurationId],configuration_key[Configuration],jira_docs[Configuration])"
          },
          {
            "name": "SOC Die",
            "dataType": "string",
            "sourceColumn": "SOC Die"
          },
          {
            "name": "id",
            "dataType": "int64",
            "sourceColumn": "id"
          },
          {
            "name": "Status",
            "dataType": "string",
            "sourceColumn": "Status"
          },
          {
            "name": "feature_issuetype",
            "dataType": "string",
            "sourceColumn": "feature_issuetype"
          },
          {
            "name": "ProjectURL",
            "dataType": "string",
            "sourceColumn": "ProjectURL"
          },
          {
            "name": "phase",
            "dataType": "string",
            "sourceColumn": "phase"
          }
        ],
        "partitions": [
          {
            "name": "jira_docs",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select bom.[Configuration],",
                "feature.[SOC Die],feature.[id],feature.[feature_issuetype],feature.[ProjectURL],feature.[phase],feature.[status],",
                "-- definitions: 1- missing, 2- available, 3- not relevant ",
                "case when  feature.[ProjectURL] is not null then 2 else 1 end as [has_HAS],",
                "case when [feature_issuetype] = 'Release' and feature.[status]in('In Architecture')and feature.[phase] in ('Agree','Decide') then 2 else 1 end as [has_OSXML],",
                "case when [feature_issuetype] = 'Release' and  feature.[status]in('In Architecture','Development','In Execution','Released' )and feature.[phase] in ('Agree','Decide')then 2 else 1 end as [has_FAS],",
                "[has_FAS] as [has_SWAS]",
                "from",
                "\t(select distinct [Configuration]",
                "\tfrom [ipg_soc_related_ips_and_milestones]",
                "\twhere  [IpConfigurationId] is not null",
                "\tand [DieID] is not null",
                "\tand [DieName] in (select [DieName] from [ipg_ie_die_list])",
                "\t)as bom",
                "left join",
                "\t(select distinct [SOC Die],[Configuration],[ProjectURL],[id],[status],[phase],[feature_issuetype]",
                "\tfrom [ipg_feature_all_cached]",
                "\twhere [tenant] = 'JIRA'",
                "\t--and [feature_issuetype] = 'Release'",
                "\tand [SOC Die]  in(select [DieName] from [ipg_ie_die_list])",
                "\tand [Configuration] is not null) as feature",
                "on bom.[Configuration] = feature.[Configuration]"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select bom.[Configuration],",
                  "feature.[SOC Die],feature.[id],feature.[feature_issuetype],feature.[ProjectURL],feature.[phase],feature.[status],",
                  "-- definitions: 1- missing, 2- available, 3- not relevant ",
                  "case when  feature.[ProjectURL] is not null then 2 else 1 end as [has_HAS],",
                  "case when [feature_issuetype] = 'Release' and feature.[status]in('In Architecture')and feature.[phase] in ('Agree','Decide') then 2 else 1 end as [has_OSXML],",
                  "case when [feature_issuetype] = 'Release' and  feature.[status]in('In Architecture','Development','In Execution','Released' )and feature.[phase] in ('Agree','Decide')then 2 else 1 end as [has_FAS],",
                  "[has_FAS] as [has_SWAS]",
                  "from",
                  "\t(select distinct [Configuration]",
                  "\tfrom [ipg_soc_related_ips_and_milestones]",
                  "\twhere  [IpConfigurationId] is not null",
                  "\tand [DieID] is not null",
                  "\tand [DieName] in (select [DieName] from [ipg_ie_die_list])",
                  "\t)as bom",
                  "left join",
                  "\t(select distinct [SOC Die],[Configuration],[ProjectURL],[id],[status],[phase],[feature_issuetype]",
                  "\tfrom [ipg_feature_all_cached]",
                  "\twhere [tenant] = 'JIRA'",
                  "\t--and [feature_issuetype] = 'Release'",
                  "\tand [SOC Die]  in(select [DieName] from [ipg_ie_die_list])",
                  "\tand [Configuration] is not null) as feature",
                  "on bom.[Configuration] = feature.[Configuration]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select bom.[Configuration],",
              "feature.[SOC Die],feature.[id],feature.[feature_issuetype],feature.[ProjectURL],feature.[phase],feature.[status],",
              "-- definitions: 1- missing, 2- available, 3- not relevant ",
              "case when  feature.[ProjectURL] is not null then 2 else 1 end as [has_HAS],",
              "case when [feature_issuetype] = 'Release' and feature.[status]in('In Architecture')and feature.[phase] in ('Agree','Decide') then 2 else 1 end as [has_OSXML],",
              "case when [feature_issuetype] = 'Release' and  feature.[status]in('In Architecture','Development','In Execution','Released' )and feature.[phase] in ('Agree','Decide')then 2 else 1 end as [has_FAS],",
              "[has_FAS] as [has_SWAS]",
              "from",
              "\t(select distinct [Configuration]",
              "\tfrom [ipg_soc_related_ips_and_milestones]",
              "\twhere  [IpConfigurationId] is not null",
              "\tand [DieID] is not null",
              "\tand [DieName] in (select [DieName] from [ipg_ie_die_list])",
              "\t)as bom",
              "left join",
              "\t(select distinct [SOC Die],[Configuration],[ProjectURL],[id],[status],[phase],[feature_issuetype]",
              "\tfrom [ipg_feature_all_cached]",
              "\twhere [tenant] = 'JIRA'",
              "\t--and [feature_issuetype] = 'Release'",
              "\tand [SOC Die]  in(select [DieName] from [ipg_ie_die_list])",
              "\tand [Configuration] is not null) as feature",
              "on bom.[Configuration] = feature.[Configuration]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "jira_docs"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select bom.[Configuration],",
              "feature.[SOC Die],feature.[id],feature.[feature_issuetype],feature.[ProjectURL],feature.[phase],feature.[status],",
              "-- definitions: 1- missing, 2- available, 3- not relevant ",
              "case when  feature.[ProjectURL] is not null then 2 else 1 end as [has_HAS],",
              "case when [feature_issuetype] = 'Release' and feature.[status]in('In Architecture')and feature.[phase] in ('Agree','Decide') then 2 else 1 end as [has_OSXML],",
              "case when [feature_issuetype] = 'Release' and  feature.[status]in('In Architecture','Development','In Execution','Released' )and feature.[phase] in ('Agree','Decide')then 2 else 1 end as [has_FAS],",
              "[has_FAS] as [has_SWAS]",
              "from",
              "\t(select distinct [Configuration]",
              "\tfrom [ipg_soc_related_ips_and_milestones]",
              "\twhere  [IpConfigurationId] is not null",
              "\tand [DieID] is not null",
              "\tand [DieName] in (select [DieName] from [ipg_ie_die_list])",
              "\t)as bom",
              "left join",
              "\t(select distinct [SOC Die],[Configuration],[ProjectURL],[id],[status],[phase],[feature_issuetype]",
              "\tfrom [ipg_feature_all_cached]",
              "\twhere [tenant] = 'JIRA'",
              "\t--and [feature_issuetype] = 'Release'",
              "\tand [SOC Die]  in(select [DieName] from [ipg_ie_die_list])",
              "\tand [Configuration] is not null) as feature",
              "on bom.[Configuration] = feature.[Configuration]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "all_docs",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "tenant",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[tenant]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "has_HAS",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[has_HAS]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "has_OSXML",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[has_OSXML]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "has_FAS",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[has_FAS]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "has_SWAS",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[has_SWAS]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "has_S1",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[has_S1]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ipconfigurationid",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[ipconfigurationid]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "SoC",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[SoC]"
          },
          {
            "type": "calculated",
            "name": "IpConfigurationId, SoC",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[ipconfigurationid]&\", \"&[SoC]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "id_for_count",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[id_for_count]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                " ",
                "        UNION(",
                "        SELECTCOLUMNS(manual_docs,",
                "        \"tenant\", \"MANUAL\",",
                "         \"SoC\", \"Lunar Lake\",",
                "        \"id_for_count\", manual_docs[f_ipconfigurationid],",
                "        \"ipconfigurationid\", manual_docs[f_ipconfigurationid],",
                "        \"has_HAS\", manual_docs[has_has],",
                "        \"has_OSXML\", manual_docs[has_osxml],",
                "        \"has_FAS\", manual_docs[has_FAS],",
                "        \"has_SWAS\", manual_docs[has_SWAS],",
                "        \"has_S1\", manual_docs[has_S1]",
                ")",
                ",",
                "        SELECTCOLUMNS(jira_docs,",
                "        \"tenant\", \"JIRA\",",
                "        \"SoC\", \"Diamond Rapids\",",
                "        \"id_for_count\", jira_docs[id],",
                "        \"ipconfigurationid\", jira_docs[IpConfigurationId],",
                "        \"has_HAS\", jira_docs[has_has],",
                "        \"has_OSXML\", jira_docs[has_osxml],",
                "        \"has_FAS\", jira_docs[has_FAS],",
                "        \"has_SWAS\", jira_docs[has_SWAS],",
                "        \"has_S1\", BLANK()",
                ")",
                ")"
              ]
            }
          }
        ]
      },
      {
        "name": "configuration_release_soc",
        "columns": [
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "feature_release",
            "dataType": "string",
            "sourceColumn": "feature_release",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SoC",
            "dataType": "string",
            "sourceColumn": "SoC"
          },
          {
            "name": "IpConfigurationId, SoC",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId, SoC"
          },
          {
            "name": "feature_release, SoC",
            "dataType": "string",
            "sourceColumn": "feature_release, SoC"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration"
          }
        ],
        "partitions": [
          {
            "name": "configuration_release",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct release.*",
                "from",
                "\t(select distinct [Configuration], [IpConfigurationId],[Configuration]as [feature_release],",
                "\tcase when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids'",
                "\twhen  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
                "\t[IpConfigurationId]+', '+ [SoC] as [IpConfigurationId, SoC],",
                "\t[feature_release]+', '+ [SoC] as [feature_release, SoC]",
                "\tfrom [ipg_soc_related_ips_and_milestones]",
                "\twhere  [feature_release] is not null",
                "\tand  [IpConfigurationId]is not null",
                "\tand [DieName]is not null",
                "\tUNION ",
                "\tselect distinct [Configuration],[IpConfigurationId],[IpFamily]as [feature_release],",
                "\tcase when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids'",
                "\twhen  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
                "\t[IpConfigurationId]+', '+ [SoC] as [IpConfigurationId, SoC],",
                "\t[feature_release]+', '+ [SoC] as [feature_release, SoC]",
                "\tfrom [ipg_soc_related_ips_and_milestones]",
                "\twhere  [feature_release] is not null",
                "\tand  [IpConfigurationId]is not null",
                "\tand [DieName]is not null) as release",
                "left join",
                "\t(select distinct [IndicatorId],[ItemId], [SoC] from [ipg_dataintegrity_waivers] where [IndicatorId] in (31,38,0)) as waivers ",
                "on release.[Configuration] = waivers.[ItemId] and  release.[SoC] =  waivers.[SoC]",
                "where waivers.[ItemId] is null"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct release.*",
                  "from",
                  "\t(select distinct [Configuration], [IpConfigurationId],[Configuration]as [feature_release],",
                  "\tcase when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids'",
                  "\twhen  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
                  "\t[IpConfigurationId]+', '+ [SoC] as [IpConfigurationId, SoC],",
                  "\t[feature_release]+', '+ [SoC] as [feature_release, SoC]",
                  "\tfrom [ipg_soc_related_ips_and_milestones]",
                  "\twhere  [feature_release] is not null",
                  "\tand  [IpConfigurationId]is not null",
                  "\tand [DieName]is not null",
                  "\tUNION ",
                  "\tselect distinct [Configuration],[IpConfigurationId],[IpFamily]as [feature_release],",
                  "\tcase when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids'",
                  "\twhen  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
                  "\t[IpConfigurationId]+', '+ [SoC] as [IpConfigurationId, SoC],",
                  "\t[feature_release]+', '+ [SoC] as [feature_release, SoC]",
                  "\tfrom [ipg_soc_related_ips_and_milestones]",
                  "\twhere  [feature_release] is not null",
                  "\tand  [IpConfigurationId]is not null",
                  "\tand [DieName]is not null) as release",
                  "left join",
                  "\t(select distinct [IndicatorId],[ItemId], [SoC] from [ipg_dataintegrity_waivers] where [IndicatorId] in (31,38,0)) as waivers ",
                  "on release.[Configuration] = waivers.[ItemId] and  release.[SoC] =  waivers.[SoC]",
                  "where waivers.[ItemId] is null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct release.*",
              "from",
              "\t(select distinct [Configuration], [IpConfigurationId],[Configuration]as [feature_release],",
              "\tcase when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids'",
              "\twhen  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
              "\t[IpConfigurationId]+', '+ [SoC] as [IpConfigurationId, SoC],",
              "\t[feature_release]+', '+ [SoC] as [feature_release, SoC]",
              "\tfrom [ipg_soc_related_ips_and_milestones]",
              "\twhere  [feature_release] is not null",
              "\tand  [IpConfigurationId]is not null",
              "\tand [DieName]is not null",
              "\tUNION ",
              "\tselect distinct [Configuration],[IpConfigurationId],[IpFamily]as [feature_release],",
              "\tcase when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids'",
              "\twhen  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
              "\t[IpConfigurationId]+', '+ [SoC] as [IpConfigurationId, SoC],",
              "\t[feature_release]+', '+ [SoC] as [feature_release, SoC]",
              "\tfrom [ipg_soc_related_ips_and_milestones]",
              "\twhere  [feature_release] is not null",
              "\tand  [IpConfigurationId]is not null",
              "\tand [DieName]is not null) as release",
              "left join",
              "\t(select distinct [IndicatorId],[ItemId], [SoC] from [ipg_dataintegrity_waivers] where [IndicatorId] in (31,38,0)) as waivers ",
              "on release.[Configuration] = waivers.[ItemId] and  release.[SoC] =  waivers.[SoC]",
              "where waivers.[ItemId] is null"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "configuration_release"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct release.*",
              "from",
              "\t(select distinct [Configuration], [IpConfigurationId],[Configuration]as [feature_release],",
              "\tcase when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids'",
              "\twhen  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
              "\t[IpConfigurationId]+', '+ [SoC] as [IpConfigurationId, SoC],",
              "\t[feature_release]+', '+ [SoC] as [feature_release, SoC]",
              "\tfrom [ipg_soc_related_ips_and_milestones]",
              "\twhere  [feature_release] is not null",
              "\tand  [IpConfigurationId]is not null",
              "\tand [DieName]is not null",
              "\tUNION ",
              "\tselect distinct [Configuration],[IpConfigurationId],[IpFamily]as [feature_release],",
              "\tcase when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids'",
              "\twhen  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
              "\t[IpConfigurationId]+', '+ [SoC] as [IpConfigurationId, SoC],",
              "\t[feature_release]+', '+ [SoC] as [feature_release, SoC]",
              "\tfrom [ipg_soc_related_ips_and_milestones]",
              "\twhere  [feature_release] is not null",
              "\tand  [IpConfigurationId]is not null",
              "\tand [DieName]is not null) as release",
              "left join",
              "\t(select distinct [IndicatorId],[ItemId], [SoC] from [ipg_dataintegrity_waivers] where [IndicatorId] in (31,38,0)) as waivers ",
              "on release.[Configuration] = waivers.[ItemId] and  release.[SoC] =  waivers.[SoC]",
              "where waivers.[ItemId] is null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "release_soc_key",
        "columns": [
          {
            "name": "feature_release",
            "dataType": "string",
            "sourceColumn": "feature_release",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SoC",
            "dataType": "string",
            "sourceColumn": "SoC"
          },
          {
            "name": "feature_release, SoC",
            "dataType": "string",
            "sourceColumn": "feature_release, SoC"
          }
        ],
        "partitions": [
          {
            "name": "release_key",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct release.*",
                "from",
                "\t(select distinct [IpFamily] as [feature_release],",
                "\tcase when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids' ",
                "\twhen  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
                "\t[feature_release]+', '+ [SoC] as [feature_release, SoC]",
                "\tfrom [ipg_soc_related_ips_and_milestones]",
                "\twhere  [feature_release] is not null",
                "\tand [DieName]is not null",
                "\tUNION",
                "\tselect distinct [Configuration]as [feature_release],",
                "\tcase when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids' ",
                "\twhen  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
                "\t[feature_release]+', '+ [SoC] as [feature_release, SoC]from [ipg_soc_related_ips_and_milestones]",
                "\twhere  [feature_release] is not null",
                "\tand [DieName]is not null) as release",
                "left join",
                "\t(select distinct [IndicatorId],[ItemId], [SoC] from [ipg_dataintegrity_waivers] where [IndicatorId] in (31,38,0)) as waivers ",
                "on release.[feature_release] = waivers.[ItemId] and  release.[SoC] =  waivers.[SoC]",
                "where waivers.[ItemId] is null"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct release.*",
                  "from",
                  "\t(select distinct [IpFamily] as [feature_release],",
                  "\tcase when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids' ",
                  "\twhen  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
                  "\t[feature_release]+', '+ [SoC] as [feature_release, SoC]",
                  "\tfrom [ipg_soc_related_ips_and_milestones]",
                  "\twhere  [feature_release] is not null",
                  "\tand [DieName]is not null",
                  "\tUNION",
                  "\tselect distinct [Configuration]as [feature_release],",
                  "\tcase when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids' ",
                  "\twhen  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
                  "\t[feature_release]+', '+ [SoC] as [feature_release, SoC]from [ipg_soc_related_ips_and_milestones]",
                  "\twhere  [feature_release] is not null",
                  "\tand [DieName]is not null) as release",
                  "left join",
                  "\t(select distinct [IndicatorId],[ItemId], [SoC] from [ipg_dataintegrity_waivers] where [IndicatorId] in (31,38,0)) as waivers ",
                  "on release.[feature_release] = waivers.[ItemId] and  release.[SoC] =  waivers.[SoC]",
                  "where waivers.[ItemId] is null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct release.*",
              "from",
              "\t(select distinct [IpFamily] as [feature_release],",
              "\tcase when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids' ",
              "\twhen  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
              "\t[feature_release]+', '+ [SoC] as [feature_release, SoC]",
              "\tfrom [ipg_soc_related_ips_and_milestones]",
              "\twhere  [feature_release] is not null",
              "\tand [DieName]is not null",
              "\tUNION",
              "\tselect distinct [Configuration]as [feature_release],",
              "\tcase when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids' ",
              "\twhen  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
              "\t[feature_release]+', '+ [SoC] as [feature_release, SoC]from [ipg_soc_related_ips_and_milestones]",
              "\twhere  [feature_release] is not null",
              "\tand [DieName]is not null) as release",
              "left join",
              "\t(select distinct [IndicatorId],[ItemId], [SoC] from [ipg_dataintegrity_waivers] where [IndicatorId] in (31,38,0)) as waivers ",
              "on release.[feature_release] = waivers.[ItemId] and  release.[SoC] =  waivers.[SoC]",
              "where waivers.[ItemId] is null"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "release_key"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct release.*",
              "from",
              "\t(select distinct [IpFamily] as [feature_release],",
              "\tcase when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids' ",
              "\twhen  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
              "\t[feature_release]+', '+ [SoC] as [feature_release, SoC]",
              "\tfrom [ipg_soc_related_ips_and_milestones]",
              "\twhere  [feature_release] is not null",
              "\tand [DieName]is not null",
              "\tUNION",
              "\tselect distinct [Configuration]as [feature_release],",
              "\tcase when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids' ",
              "\twhen  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
              "\t[feature_release]+', '+ [SoC] as [feature_release, SoC]from [ipg_soc_related_ips_and_milestones]",
              "\twhere  [feature_release] is not null",
              "\tand [DieName]is not null) as release",
              "left join",
              "\t(select distinct [IndicatorId],[ItemId], [SoC] from [ipg_dataintegrity_waivers] where [IndicatorId] in (31,38,0)) as waivers ",
              "on release.[feature_release] = waivers.[ItemId] and  release.[SoC] =  waivers.[SoC]",
              "where waivers.[ItemId] is null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "configuration_soc_key",
        "columns": [
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "SoC",
            "dataType": "string",
            "sourceColumn": "SoC",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IpConfigurationId, SoC",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId, SoC",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "configuration_soc_key",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct [IpConfigurationId],",
                "case when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids'",
                "when  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
                "[IpConfigurationId]+', '+ [SoC] as [IpConfigurationId, SoC]",
                "from [ipg_soc_related_ips_and_milestones]",
                "where [IpConfigurationId]is not null",
                "and [DieName]is not null"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [IpConfigurationId],",
                  "case when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids'",
                  "when  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
                  "[IpConfigurationId]+', '+ [SoC] as [IpConfigurationId, SoC]",
                  "from [ipg_soc_related_ips_and_milestones]",
                  "where [IpConfigurationId]is not null",
                  "and [DieName]is not null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct [IpConfigurationId],",
              "case when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids'",
              "when  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
              "[IpConfigurationId]+', '+ [SoC] as [IpConfigurationId, SoC]",
              "from [ipg_soc_related_ips_and_milestones]",
              "where [IpConfigurationId]is not null",
              "and [DieName]is not null"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "configuration_soc_key"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [IpConfigurationId],",
              "case when [DieName] like'%Lunar Lake%' then 'Lunar Lake'   when [DieName] like'%diamond rapids%' or [DieName] like'%DMR%' then 'Diamond Rapids'",
              "when  lower([DieName]) like '%Tofino 5 Die%' then 'Tofino 5'else [DieName] end as [SoC],",
              "[IpConfigurationId]+', '+ [SoC] as [IpConfigurationId, SoC]",
              "from [ipg_soc_related_ips_and_milestones]",
              "where [IpConfigurationId]is not null",
              "and [DieName]is not null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "sdle_data",
        "columns": [
          {
            "name": "SDE_ProjectTask.ProjectTaskID",
            "dataType": "string",
            "sourceColumn": "SDE_ProjectTask.ProjectTaskID"
          },
          {
            "name": "SDE_ProjectTask.ProjectTaskTitle",
            "dataType": "string",
            "sourceColumn": "SDE_ProjectTask.ProjectTaskTitle"
          },
          {
            "name": "SDE_ProjectTask.TaskStatusID",
            "dataType": "string",
            "sourceColumn": "SDE_ProjectTask.TaskStatusID"
          },
          {
            "name": "SDE_ProjectTask.TaskStatusName",
            "dataType": "string",
            "sourceColumn": "SDE_ProjectTask.TaskStatusName"
          },
          {
            "type": "calculated",
            "name": "feature_rule",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "//legend: 1 - HSD, 2 - JIRA, 0 - None.",
              "IF(",
              "NOT(ISERROR(SEARCH(\"HSD#\",'sdle_data'[SDE_ProjectTask.ProjectTaskTitle]))),",
              "1,",
              "IF(",
              "NOT(ISERROR(SEARCH(\"JIRA#\",'sdle_data'[SDE_ProjectTask.ProjectTaskTitle]))),",
              "2,",
              "0))"
            ]
          },
          {
            "type": "calculated",
            "name": "feature_end",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF([feature_rule]in{1,2},",
              "FIND(\" : \",[SDE_ProjectTask.ProjectTaskTitle])-1,",
              "0)"
            ]
          },
          {
            "type": "calculated",
            "name": "feature_id",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "SUBSTITUTE(SUBSTITUTE(",
              "LEFT(sdle_data[SDE_ProjectTask.ProjectTaskTitle],[feature_end]),",
              "\"HSD#\",\"\"),",
              "\"JIRA#\",\"\")"
            ]
          },
          {
            "type": "calculated",
            "name": "feature_category",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF([feature_rule]in{1,2},",
              "SUBSTITUTE([SDE_ProjectTask.ProjectTaskTitle],LEFT([SDE_ProjectTask.ProjectTaskTitle],sdle_data[feature_end]+3),\"\"),",
              "\"\")"
            ]
          },
          {
            "type": "calculated",
            "name": "feature_stage",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH([feature_category],",
              "\"Review Feature Security Architecture\", \"S1\",",
              "\"Analyze Feature Security and Privacy Design\", \"S2\",",
              "\"Validate Feature Security Pre-Silicon\", \"S3\",",
              "\"Validate Feature Security Post-Silicon\", \"S4\"",
              ")"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"AnalysisServices/sdlintegrated_hs intel com;SDLIntegrated\",",
                "    Model1 = Source{[Id=\"Model\"]}[Data],",
                "    Model2 = Model1{[Id=\"Model\"]}[Data],",
                "    #\"Added Items\" = Cube.Transform(Model2,",
                "        {",
                "            {Cube.AddAndExpandDimensionColumn, \"[SDE_ProjectTask]\", {\"[SDE_ProjectTask].[ProjectTaskID].[ProjectTaskID]\", \"[SDE_ProjectTask].[ProjectTaskTitle].[ProjectTaskTitle]\", \"[SDE_ProjectTask].[TaskStatusID].[TaskStatusID]\", \"[SDE_ProjectTask].[TaskStatusName].[TaskStatusName]\"}, {\"SDE_ProjectTask.ProjectTaskID\", \"SDE_ProjectTask.ProjectTaskTitle\", \"SDE_ProjectTask.TaskStatusID\", \"SDE_ProjectTask.TaskStatusName\"}}",
                "        })",
                "in",
                "    #\"Added Items\""
              ]
            }
          }
        ]
      },
      {
        "name": "feature_id_for_sdle",
        "columns": [
          {
            "name": "feature_id_for_sdle",
            "dataType": "string",
            "sourceColumn": "feature_id_for_sdle"
          }
        ],
        "partitions": [
          {
            "name": "feature_id_for_sdle",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct [feature_id_for_sdle]",
                "from",
                "\t(select  ",
                "\tlen([url])- CHARINDEX('/browse/', [url])-7 as [id_index],",
                "\tright([url], [id_index])as [jira_id],",
                "\tcase when [tenant] = 'JIRA' then [jira_id] else cast([id]as varchar) end  as [feature_id_for_sdle]",
                "\tfrom [ipg_feature_all_cached]) as feature_data"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [feature_id_for_sdle]",
                  "from",
                  "\t(select  ",
                  "\tlen([url])- CHARINDEX('/browse/', [url])-7 as [id_index],",
                  "\tright([url], [id_index])as [jira_id],",
                  "\tcase when [tenant] = 'JIRA' then [jira_id] else cast([id]as varchar) end  as [feature_id_for_sdle]",
                  "\tfrom [ipg_feature_all_cached]) as feature_data</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct [feature_id_for_sdle]",
              "from",
              "\t(select  ",
              "\tlen([url])- CHARINDEX('/browse/', [url])-7 as [id_index],",
              "\tright([url], [id_index])as [jira_id],",
              "\tcase when [tenant] = 'JIRA' then [jira_id] else cast([id]as varchar) end  as [feature_id_for_sdle]",
              "\tfrom [ipg_feature_all_cached]) as feature_data"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "feature_id_for_sdle"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [feature_id_for_sdle]",
              "from",
              "\t(select  ",
              "\tlen([url])- CHARINDEX('/browse/', [url])-7 as [id_index],",
              "\tright([url], [id_index])as [jira_id],",
              "\tcase when [tenant] = 'JIRA' then [jira_id] else cast([id]as varchar) end  as [feature_id_for_sdle]",
              "\tfrom [ipg_feature_all_cached]) as feature_data</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "sdle_project_level_data",
        "columns": [
          {
            "name": "CSDL_SDE_Project.ApplicationID",
            "dataType": "string",
            "sourceColumn": "CSDL_SDE_Project.ApplicationID"
          },
          {
            "name": "CSDL_SDE_Project.ApplicationName",
            "dataType": "string",
            "sourceColumn": "CSDL_SDE_Project.ApplicationName"
          },
          {
            "name": "CSDL_SDE_Project.MetS0NumericInd",
            "dataType": "string",
            "sourceColumn": "CSDL_SDE_Project.MetS0NumericInd"
          },
          {
            "name": "CSDL_SDE_Project.MetS0Ratio",
            "dataType": "string",
            "sourceColumn": "CSDL_SDE_Project.MetS0Ratio"
          },
          {
            "type": "calculated",
            "name": "MetS0Legend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH([CSDL_SDE_Project.MetS0NumericInd],",
              "\"0\", \"Incomplete\",",
              "\"1\", \"Complete\",",
              "\"2\", \"Awaiting\",",
              "\"3\",\"NA\",",
              "BLANK()",
              ")"
            ]
          },
          {
            "name": "CSDL_SDE_Project.MetS1NumericInd",
            "dataType": "string",
            "sourceColumn": "CSDL_SDE_Project.MetS1NumericInd"
          },
          {
            "name": "CSDL_SDE_Project.METS1Ratio",
            "dataType": "string",
            "sourceColumn": "CSDL_SDE_Project.METS1Ratio"
          },
          {
            "type": "calculated",
            "name": "MetS1Legend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH([CSDL_SDE_Project.MetS1NumericInd],",
              "\"0\", \"Incomplete\",",
              "\"1\", \"Complete\",",
              "\"2\", \"Awaiting\",",
              "\"3\",\"NA\",",
              "BLANK()",
              ")"
            ]
          },
          {
            "name": "CSDL_SDE_Project.ProjectName",
            "dataType": "string",
            "sourceColumn": "CSDL_SDE_Project.ProjectName"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"AnalysisServices/sdlintegrated_hs intel com;SDLIntegrated\",",
                "    Model1 = Source{[Id=\"Model\"]}[Data],",
                "    Model2 = Model1{[Id=\"Model\"]}[Data],",
                "    #\"Added Items\" = Cube.Transform(Model2,",
                "        {",
                "            {Cube.AddAndExpandDimensionColumn, \"[CSDL_SDE_Project]\", {\"[CSDL_SDE_Project].[ApplicationID].[ApplicationID]\", \"[CSDL_SDE_Project].[ApplicationName].[ApplicationName]\", \"[CSDL_SDE_Project].[MetS0NumericInd].[MetS0NumericInd]\", \"[CSDL_SDE_Project].[MetS0Ratio].[MetS0Ratio]\", \"[CSDL_SDE_Project].[MetS1NumericInd].[MetS1NumericInd]\", \"[CSDL_SDE_Project].[METS1Ratio].[METS1Ratio]\", \"[CSDL_SDE_Project].[ProjectName].[ProjectName]\"}, {\"CSDL_SDE_Project.ApplicationID\", \"CSDL_SDE_Project.ApplicationName\", \"CSDL_SDE_Project.MetS0NumericInd\", \"CSDL_SDE_Project.MetS0Ratio\", \"CSDL_SDE_Project.MetS1NumericInd\", \"CSDL_SDE_Project.METS1Ratio\", \"CSDL_SDE_Project.ProjectName\"}}",
                "        })",
                "in",
                "    #\"Added Items\""
              ]
            }
          }
        ]
      },
      {
        "name": "sdle_ip_mapping",
        "columns": [
          {
            "name": "Generation_Configuration",
            "dataType": "string",
            "sourceColumn": "Generation_Configuration"
          }
        ],
        "partitions": [
          {
            "name": "sdle_ip_mapping",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct [Configuration] as [Generation_Configuration]",
                "from [V_IPG_CARBON_MILESTONE]",
                "where [DevOrg] = 'ipg'",
                "and [Configuration] != ''",
                "and [Configuration]is not null",
                "",
                "union",
                "",
                "select distinct [Generation] as [Generation_Configuration]",
                "from [V_IPG_CARBON_MILESTONE]",
                "where [DevOrg] = 'ipg'",
                "and [Generation] != ''",
                "and [Generation]is not null"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Configuration] as [Generation_Configuration]",
                  "from [V_IPG_CARBON_MILESTONE]",
                  "where [DevOrg] = 'ipg'",
                  "and [Configuration] != ''",
                  "and [Configuration]is not null",
                  "",
                  "union",
                  "",
                  "select distinct [Generation] as [Generation_Configuration]",
                  "from [V_IPG_CARBON_MILESTONE]",
                  "where [DevOrg] = 'ipg'",
                  "and [Generation] != ''",
                  "and [Generation]is not null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct [Configuration] as [Generation_Configuration]",
              "from [V_IPG_CARBON_MILESTONE]",
              "where [DevOrg] = 'ipg'",
              "and [Configuration] != ''",
              "and [Configuration]is not null",
              "",
              "union",
              "",
              "select distinct [Generation] as [Generation_Configuration]",
              "from [V_IPG_CARBON_MILESTONE]",
              "where [DevOrg] = 'ipg'",
              "and [Generation] != ''",
              "and [Generation]is not null"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "sdle_ip_mapping"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Configuration] as [Generation_Configuration]",
              "from [V_IPG_CARBON_MILESTONE]",
              "where [DevOrg] = 'ipg'",
              "and [Configuration] != ''",
              "and [Configuration]is not null",
              "",
              "union",
              "",
              "select distinct [Generation] as [Generation_Configuration]",
              "from [V_IPG_CARBON_MILESTONE]",
              "where [DevOrg] = 'ipg'",
              "and [Generation] != ''",
              "and [Generation]is not null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "refresh_time",
        "columns": [
          {
            "name": "refresh_time",
            "dataType": "dateTime",
            "sourceColumn": "refresh_time",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "type": "calculated",
            "name": "last_refresh_time",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[refresh_time]&\" PST\""
          }
        ],
        "partitions": [
          {
            "name": "refresh_time",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": "select distinct getutcdate() as [refresh_time]",
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct getutcdate() as [refresh_time]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select distinct getutcdate() as [refresh_time]"
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "refresh_time"
          },
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct getutcdate() as [refresh_time]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          }
        ]
      },
      {
        "name": "configuration_generation",
        "columns": [
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Generation_Configuration",
            "dataType": "string",
            "sourceColumn": "Generation_Configuration",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "configuration_generation",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct  [Configuration] ,[Configuration] as [Generation_Configuration]",
                "from [V_IPG_CARBON_MILESTONE]",
                "where [DevOrg] = 'ipg'",
                "and [Configuration] != ''",
                "and [Configuration]is not null",
                "",
                "union",
                "",
                "select distinct [Configuration] ,[Generation] as [Generation_Configuration]",
                "from [V_IPG_CARBON_MILESTONE]",
                "where [DevOrg] = 'ipg'",
                "and [Generation] != ''",
                "and [Generation]is not null"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  [Configuration] ,[Configuration] as [Generation_Configuration]",
                  "from [V_IPG_CARBON_MILESTONE]",
                  "where [DevOrg] = 'ipg'",
                  "and [Configuration] != ''",
                  "and [Configuration]is not null",
                  "",
                  "union",
                  "",
                  "select distinct [Configuration] ,[Generation] as [Generation_Configuration]",
                  "from [V_IPG_CARBON_MILESTONE]",
                  "where [DevOrg] = 'ipg'",
                  "and [Generation] != ''",
                  "and [Generation]is not null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct  [Configuration] ,[Configuration] as [Generation_Configuration]",
              "from [V_IPG_CARBON_MILESTONE]",
              "where [DevOrg] = 'ipg'",
              "and [Configuration] != ''",
              "and [Configuration]is not null",
              "",
              "union",
              "",
              "select distinct [Configuration] ,[Generation] as [Generation_Configuration]",
              "from [V_IPG_CARBON_MILESTONE]",
              "where [DevOrg] = 'ipg'",
              "and [Generation] != ''",
              "and [Generation]is not null"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "configuration_generation"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  [Configuration] ,[Configuration] as [Generation_Configuration]",
              "from [V_IPG_CARBON_MILESTONE]",
              "where [DevOrg] = 'ipg'",
              "and [Configuration] != ''",
              "and [Configuration]is not null",
              "",
              "union",
              "",
              "select distinct [Configuration] ,[Generation] as [Generation_Configuration]",
              "from [V_IPG_CARBON_MILESTONE]",
              "where [DevOrg] = 'ipg'",
              "and [Generation] != ''",
              "and [Generation]is not null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "indicator_master_list",
        "columns": [
          {
            "name": "Count of",
            "dataType": "string",
            "sourceColumn": "Count of",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DI Filter",
            "dataType": "string",
            "sourceColumn": "DI Filter",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Domain",
            "dataType": "string",
            "sourceColumn": "Domain",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IC Filter",
            "dataType": "string",
            "sourceColumn": "IC Filter",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IE Filter",
            "dataType": "string",
            "sourceColumn": "IE Filter",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Indicator",
            "dataType": "string",
            "sourceColumn": "Indicator",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Indicator order",
            "dataType": "string",
            "sourceColumn": "Indicator order",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IndicatorId",
            "dataType": "string",
            "sourceColumn": "IndicatorId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Team",
            "dataType": "string",
            "sourceColumn": "Team",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Team order",
            "dataType": "string",
            "sourceColumn": "Team order",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IAC Filter",
            "dataType": "string",
            "sourceColumn": "IAC Filter",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ibi_updated_date",
            "dataType": "dateTime",
            "sourceColumn": "ibi_updated_date",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "type": "calculated",
            "name": "milestone_group",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH([Indicator],",
              "\"IAC Milestone\", \"IAC\",",
              "\"eFV/ FV Milestone\", \" IC/ICR\",",
              "\"IP Point of Contacts\", \"Other\",",
              "\"Retrospectives: Late drop/Hotfix - Impact on customer\", \"Other\",",
              "\"FAS Documentation\", \"IAC\",",
              "\"IE Milestone\", \" IE\",",
              "\"IAC Trend\", \"IAC\",",
              "\"Internal Filed PCRs dispositioned\", \" IE\",",
              "\"Carbon Cleanup: Supplier V.S. ProductFamily\", \"Other\",",
              "\"SOC contract doc\", \"Other\", ",
              "\"Global SOC Filed PCRs dispositioned\", \" IE\",",
              "\"HAS Documentation\", \"IAC\",",
              "\"Datasheet Documentation\", \" IC/ICR\",",
              "\"BOM - IPs with no Parent\", \"Other\",",
              "\"IP Milestone POR\", \"Other\",",
              "\"SDLe S1 Done\", \"IAC\",",
              "\"MDG names\", \"Other\",",
              "\"IPEC Doc\", \" IE\",",
              "\"Carbon Cleanup: IPFamily V.S. Tag\", \"Other\",",
              "\"Retrospectives: Hotfix details\", \"Other\",",
              "\"Carbon IE Marked Complete\", \" IE\",",
              "\"OPS contact for supplier\", \"Other\",",
              "\"Gladius (IP catalog) field in Carbon\", \"Other\",",
              "\"Gladius IP Milestones\", \" IE\",",
              "\"IC/ICR Doc\", \" IC/ICR\",",
              "\"TRM Documentation\", \" IE\",",
              "\"SWAS Documentation\", \"IAC\",",
              "\"IC/ICR Milestone\", \" IC/ICR\",",
              "\"Carbon IAC Marked Complete\", \"IAC\",",
              "\"OSXML Documentation\", \"IAC\",",
              "\"CM contact for products\", \"Other\",",
              "\"SOC Filed PCRs dispositioned\", \" IE\",",
              "\"SDLe S0 Done\", \" IC/ICR\",",
              "\"IP milestone Trend\", \"Other\",",
              "\"Retrospectives: Late drop details\", \"Other\",",
              "\"Stale drops\", \"Other\",",
              "\"Other\"",
              "",
              ")"
            ]
          }
        ],
        "partitions": [
          {
            "name": "indicator_master_list",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select * from",
                "ipg_data_integrity_v"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from",
                  "ipg_data_integrity_v</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select * from",
              "ipg_data_integrity_v"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "indicator_master_list"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from",
              "ipg_data_integrity_v</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "monitor_standard",
        "columns": [
          {
            "name": "Drop",
            "dataType": "string",
            "sourceColumn": "Drop",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DropType",
            "dataType": "string",
            "sourceColumn": "DropType",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Complete",
            "dataType": "string",
            "sourceColumn": "Complete",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "MilestoneID",
            "dataType": "int64",
            "sourceColumn": "MilestoneID",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "IPConfigurationID",
            "dataType": "int64",
            "sourceColumn": "IPConfigurationID",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Supplier",
            "dataType": "string",
            "sourceColumn": "Supplier",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DevSubOrg",
            "dataType": "string",
            "sourceColumn": "DevSubOrg",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Domain",
            "dataType": "string",
            "sourceColumn": "Domain",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Generation",
            "dataType": "string",
            "sourceColumn": "Generation",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IpFamily",
            "dataType": "string",
            "sourceColumn": "IpFamily",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IpType",
            "dataType": "string",
            "sourceColumn": "IpType",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IPXFQN",
            "dataType": "string",
            "sourceColumn": "IPXFQN",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Process",
            "dataType": "string",
            "sourceColumn": "Process",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Node",
            "dataType": "string",
            "sourceColumn": "Node",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "PorYYYYWW",
            "dataType": "int64",
            "sourceColumn": "PorYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "TrendYYYYWW",
            "dataType": "int64",
            "sourceColumn": "TrendYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "RequestingProducts",
            "dataType": "string",
            "sourceColumn": "RequestingProducts",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Reuse",
            "dataType": "string",
            "sourceColumn": "Reuse",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Revision",
            "dataType": "string",
            "sourceColumn": "Revision",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "UsingProducts",
            "dataType": "string",
            "sourceColumn": "UsingProducts",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DevOrg",
            "dataType": "string",
            "sourceColumn": "DevOrg",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "PorExactDate",
            "dataType": "dateTime",
            "sourceColumn": "PorExactDate"
          },
          {
            "name": "CountStandard",
            "dataType": "int64",
            "sourceColumn": "CountStandard"
          }
        ],
        "partitions": [
          {
            "name": "monitor_standard",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select  carbon.[Drop]",
                ", filter.[CountStandard]",
                ", carbon.[PorExactDate]",
                ", carbon.[DropType] ",
                ",carbon.[Complete]",
                ", carbon.[Configuration]",
                ", carbon.[MilestoneID]",
                ", carbon.[IPConfigurationID]",
                ", carbon.[DevGroup] as Supplier",
                ", carbon.[DevSubOrg]",
                ", carbon.[Domain]",
                ", carbon.[Generation]",
                ", carbon.[IpFamily]",
                ", carbon.[IpType]",
                ", carbon.[IPXFQN]",
                ", carbon.[Process]",
                ", carbon.[Node]",
                ", carbon.[PorYYYYWW]",
                ", carbon.[TrendYYYYWW]",
                ", carbon.[RequestingProducts]",
                ", carbon.[Reuse]",
                ", carbon.[Revision]",
                ", carbon.[UsingProducts]",
                ", carbon.[DevOrg]",
                "from [V_IPG_Carbon_Milestone] carbon",
                "inner join ",
                "(select count([DropType]) as [CountStandard], [DropType], [Drop], [IPConfigurationID] from [V_IPG_Carbon_Milestone]",
                "where [DropType] = 'Standard' and [DevOrg] = 'IPG' and [IPType] <> 'Library' and [Reuse] <> 'Configurable'",
                "and [MilestoneID] in ",
                "(select [ID] from  [DW.release_central.milestone_version] ",
                "where [ww] >= 202001) -- submitted date",
                "and [Drop] in ",
                "(select distinct [plc_milestone.name]",
                "from [ES.release_central.plc_milestone]",
                "where [plc_milestone.swimlane] in 'IP Design'",
                "and[plc_milestone.plc_phase] in 'Execution') -- Drop Types",
                "group by [IPConfigurationID], [Drop], [DropType]",
                "having count([DropType]) > 1) filter on filter.[IPConfigurationID] = carbon.[IPConfigurationID] ",
                "and filter.[drop] = carbon.[drop] and filter.[droptype] = carbon.[droptype]",
                "where [MilestoneID] in ",
                "(select [ID] from  [DW.release_central.milestone_version] ",
                "where [ww] >= 202001)"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select  carbon.[Drop]",
                  ", filter.[CountStandard]",
                  ", carbon.[PorExactDate]",
                  ", carbon.[DropType] ",
                  ",carbon.[Complete]",
                  ", carbon.[Configuration]",
                  ", carbon.[MilestoneID]",
                  ", carbon.[IPConfigurationID]",
                  ", carbon.[DevGroup] as Supplier",
                  ", carbon.[DevSubOrg]",
                  ", carbon.[Domain]",
                  ", carbon.[Generation]",
                  ", carbon.[IpFamily]",
                  ", carbon.[IpType]",
                  ", carbon.[IPXFQN]",
                  ", carbon.[Process]",
                  ", carbon.[Node]",
                  ", carbon.[PorYYYYWW]",
                  ", carbon.[TrendYYYYWW]",
                  ", carbon.[RequestingProducts]",
                  ", carbon.[Reuse]",
                  ", carbon.[Revision]",
                  ", carbon.[UsingProducts]",
                  ", carbon.[DevOrg]",
                  "from [V_IPG_Carbon_Milestone] carbon",
                  "inner join ",
                  "(select count([DropType]) as [CountStandard], [DropType], [Drop], [IPConfigurationID] from [V_IPG_Carbon_Milestone]",
                  "where [DropType] = 'Standard' and [DevOrg] = 'IPG' and [IPType] <> 'Library' and [Reuse] <> 'Configurable'",
                  "and [MilestoneID] in ",
                  "(select [ID] from  [DW.release_central.milestone_version] ",
                  "where [ww] >= 202001) -- submitted date",
                  "and [Drop] in ",
                  "(select distinct [plc_milestone.name]",
                  "from [ES.release_central.plc_milestone]",
                  "where [plc_milestone.swimlane] in 'IP Design'",
                  "and[plc_milestone.plc_phase] in 'Execution') -- Drop Types",
                  "group by [IPConfigurationID], [Drop], [DropType]",
                  "having count([DropType]) > 1) filter on filter.[IPConfigurationID] = carbon.[IPConfigurationID] ",
                  "and filter.[drop] = carbon.[drop] and filter.[droptype] = carbon.[droptype]",
                  "where [MilestoneID] in ",
                  "(select [ID] from  [DW.release_central.milestone_version] ",
                  "where [ww] >= 202001)</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select  carbon.[Drop]",
              ", filter.[CountStandard]",
              ", carbon.[PorExactDate]",
              ", carbon.[DropType] ",
              ",carbon.[Complete]",
              ", carbon.[Configuration]",
              ", carbon.[MilestoneID]",
              ", carbon.[IPConfigurationID]",
              ", carbon.[DevGroup] as Supplier",
              ", carbon.[DevSubOrg]",
              ", carbon.[Domain]",
              ", carbon.[Generation]",
              ", carbon.[IpFamily]",
              ", carbon.[IpType]",
              ", carbon.[IPXFQN]",
              ", carbon.[Process]",
              ", carbon.[Node]",
              ", carbon.[PorYYYYWW]",
              ", carbon.[TrendYYYYWW]",
              ", carbon.[RequestingProducts]",
              ", carbon.[Reuse]",
              ", carbon.[Revision]",
              ", carbon.[UsingProducts]",
              ", carbon.[DevOrg]",
              "from [V_IPG_Carbon_Milestone] carbon",
              "inner join ",
              "(select count([DropType]) as [CountStandard], [DropType], [Drop], [IPConfigurationID] from [V_IPG_Carbon_Milestone]",
              "where [DropType] = 'Standard' and [DevOrg] = 'IPG' and [IPType] <> 'Library' and [Reuse] <> 'Configurable'",
              "and [MilestoneID] in ",
              "(select [ID] from  [DW.release_central.milestone_version] ",
              "where [ww] >= 202001) -- submitted date",
              "and [Drop] in ",
              "(select distinct [plc_milestone.name]",
              "from [ES.release_central.plc_milestone]",
              "where [plc_milestone.swimlane] in 'IP Design'",
              "and[plc_milestone.plc_phase] in 'Execution') -- Drop Types",
              "group by [IPConfigurationID], [Drop], [DropType]",
              "having count([DropType]) > 1) filter on filter.[IPConfigurationID] = carbon.[IPConfigurationID] ",
              "and filter.[drop] = carbon.[drop] and filter.[droptype] = carbon.[droptype]",
              "where [MilestoneID] in ",
              "(select [ID] from  [DW.release_central.milestone_version] ",
              "where [ww] >= 202001)"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "monitor_standard"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select  carbon.[Drop]",
              ", filter.[CountStandard]",
              ", carbon.[PorExactDate]",
              ", carbon.[DropType] ",
              ",carbon.[Complete]",
              ", carbon.[Configuration]",
              ", carbon.[MilestoneID]",
              ", carbon.[IPConfigurationID]",
              ", carbon.[DevGroup] as Supplier",
              ", carbon.[DevSubOrg]",
              ", carbon.[Domain]",
              ", carbon.[Generation]",
              ", carbon.[IpFamily]",
              ", carbon.[IpType]",
              ", carbon.[IPXFQN]",
              ", carbon.[Process]",
              ", carbon.[Node]",
              ", carbon.[PorYYYYWW]",
              ", carbon.[TrendYYYYWW]",
              ", carbon.[RequestingProducts]",
              ", carbon.[Reuse]",
              ", carbon.[Revision]",
              ", carbon.[UsingProducts]",
              ", carbon.[DevOrg]",
              "from [V_IPG_Carbon_Milestone] carbon",
              "inner join ",
              "(select count([DropType]) as [CountStandard], [DropType], [Drop], [IPConfigurationID] from [V_IPG_Carbon_Milestone]",
              "where [DropType] = 'Standard' and [DevOrg] = 'IPG' and [IPType] <> 'Library' and [Reuse] <> 'Configurable'",
              "and [MilestoneID] in ",
              "(select [ID] from  [DW.release_central.milestone_version] ",
              "where [ww] >= 202001) -- submitted date",
              "and [Drop] in ",
              "(select distinct [plc_milestone.name]",
              "from [ES.release_central.plc_milestone]",
              "where [plc_milestone.swimlane] in 'IP Design'",
              "and[plc_milestone.plc_phase] in 'Execution') -- Drop Types",
              "group by [IPConfigurationID], [Drop], [DropType]",
              "having count([DropType]) > 1) filter on filter.[IPConfigurationID] = carbon.[IPConfigurationID] ",
              "and filter.[drop] = carbon.[drop] and filter.[droptype] = carbon.[droptype]",
              "where [MilestoneID] in ",
              "(select [ID] from  [DW.release_central.milestone_version] ",
              "where [ww] >= 202001)</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "di_waivers",
        "columns": [
          {
            "name": "IndicatorId",
            "dataType": "string",
            "sourceColumn": "IndicatorId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IsActive",
            "dataType": "string",
            "sourceColumn": "IsActive",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ItemId",
            "dataType": "string",
            "sourceColumn": "ItemId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Reason",
            "dataType": "string",
            "sourceColumn": "Reason",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SoC",
            "dataType": "string",
            "sourceColumn": "SoC",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ibi_updated_date",
            "dataType": "dateTime",
            "sourceColumn": "ibi_updated_date",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          }
        ],
        "partitions": [
          {
            "name": "di_waivers",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select * From ",
                "ipg_dataintegrity_waivers"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * From ",
                  "ipg_dataintegrity_waivers</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select * From ",
              "ipg_dataintegrity_waivers"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "di_waivers"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * From ",
              "ipg_dataintegrity_waivers</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      }
    ],
    "relationships": [
      {
        "name": "10891ca4-5dea-454a-bffe-e31ced0280c5",
        "fromTable": "Main",
        "fromColumn": "User",
        "toTable": "worker_public",
        "toColumn": "User_Idsid",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "92349258-38a0-4608-b153-b85b306a5e11",
        "fromTable": "Main",
        "fromColumn": "IpConfigurationId",
        "toTable": "configuration_key",
        "toColumn": "IpConfigurationId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "8951b2a4-0875-4dde-ab01-4749555b10a7",
        "fromTable": "Main",
        "fromColumn": "DieID",
        "toTable": "soc_customers_anchor",
        "toColumn": "Speed id",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "8ae2de47-63a3-43ff-90b4-02391fbaaf95",
        "fromTable": "Main",
        "fromColumn": "IpConfigurationId, DieID",
        "toTable": "soc_related_ips_and_milestones",
        "toColumn": "IpConfigurationId, DieID",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "c8d2a699-5832-42f0-a591-aea6a2a742ae",
        "fromTable": "configuration_release_soc",
        "fromColumn": "IpConfigurationId, SoC",
        "toTable": "configuration_soc_key",
        "toColumn": "IpConfigurationId, SoC",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "ea4b13dc-d7c3-4cf1-b5e3-2e9cf4fb8c8c",
        "fromTable": "configuration_release_soc",
        "fromColumn": "feature_release, SoC",
        "toTable": "release_soc_key",
        "toColumn": "feature_release, SoC",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "cb8098e3-e6ea-4ba0-bfae-07793a7318bc",
        "fromTable": "Main",
        "fromColumn": "IpConfigurationId, SoC",
        "toTable": "configuration_soc_key",
        "toColumn": "IpConfigurationId, SoC",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "62ab2699-52da-4a58-8e00-f546ffd2acf2",
        "fromTable": "features",
        "fromColumn": "Configuration, SoC",
        "toTable": "release_soc_key",
        "toColumn": "feature_release, SoC",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "3c47e18d-3cbc-4893-b1b8-6a453f6176d2",
        "fromTable": "manual_docs",
        "fromColumn": "f_ipconfigurationid",
        "toTable": "configuration_key",
        "toColumn": "IpConfigurationId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "9286751c-55d7-4dcd-a967-a8e5502cff25",
        "fromTable": "all_docs",
        "fromColumn": "IpConfigurationId, SoC",
        "toTable": "configuration_soc_key",
        "toColumn": "IpConfigurationId, SoC",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "81ebe064-3559-4b8d-b16f-608fc86566f3",
        "fromTable": "features",
        "fromColumn": "feature_id_for_sdle",
        "toTable": "feature_id_for_sdle",
        "toColumn": "feature_id_for_sdle",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "f9efe704-157e-460c-bb04-df215648496a",
        "fromTable": "sdle_data",
        "fromColumn": "feature_id",
        "toTable": "feature_id_for_sdle",
        "toColumn": "feature_id_for_sdle",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "d401f47c-7dff-43c2-b573-ab1f83432ced",
        "fromTable": "sdle_project_level_data",
        "fromColumn": "CSDL_SDE_Project.ProjectName",
        "toTable": "sdle_ip_mapping",
        "toColumn": "Generation_Configuration",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "efedb116-ff0a-4cda-9fd0-e6dc6e9c62be",
        "fromTable": "configuration_generation",
        "fromColumn": "Configuration",
        "toTable": "configuration_key",
        "toColumn": "Configuration",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "dd4d637f-1732-4dbe-b384-7924ae996434",
        "fromTable": "configuration_generation",
        "fromColumn": "Generation_Configuration",
        "toTable": "sdle_ip_mapping",
        "toColumn": "Generation_Configuration",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "f47fda2b-b8fb-411b-a3f8-bb22864f7cc1",
        "fromTable": "Main",
        "fromColumn": "IndicatorId",
        "toTable": "indicator_master_list",
        "toColumn": "IndicatorId"
      },
      {
        "name": "32deea76-dae9-402e-a915-3cd30e6eab3e",
        "fromTable": "Main",
        "fromColumn": "IpConfigurationId",
        "toTable": "release_central_family",
        "toColumn": "IpConfigurationId"
      }
    ],
    "roles": [
      {
        "name": "Admins",
        "modelPermission": "administrator",
        "members": [
          {
            "memberName": "AMR\\ssas_msbitabmd",
            "memberId": "S-1-5-21-725345543-602162358-527237240-2406644"
          },
          {
            "memberName": "AMR\\sys_actis",
            "memberId": "S-1-5-21-725345543-602162358-527237240-3763406"
          },
          {
            "memberName": "AMR\\IPG_Dashboard_Developers",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4603422"
          },
          {
            "memberName": "GER\\ecsys_ibi_app",
            "memberId": "S-1-5-21-2052111302-1275210071-1644491937-629480"
          },
          {
            "memberName": "GER\\ipmo bis east",
            "memberId": "S-1-5-21-2052111302-1275210071-1644491937-1366211"
          }
        ]
      },
      {
        "name": "Readers",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "AMR\\IPG_Dashboard_SuperUsers",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4603439"
          },
          {
            "memberName": "AMR\\IPG_Dashboard_Users",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4603440"
          },
          {
            "memberName": "GER\\ohafutax",
            "memberId": "S-1-5-21-2052111302-1275210071-1644491937-1358942"
          }
        ]
      }
    ],
    "annotations": [
      {
        "name": "ClientCompatibilityLevel",
        "value": "500"
      }
    ]
  },
  "id": "SemanticModel"
}